<?php

use Latte\Runtime as LR;

/** source: %A% */
final class Template%a% extends Latte\Runtime\Template
{
	protected const BLOCKS = [
		['menu' => 'blockMenu'],
	];


	public function main(): array
	{
		extract($this->params);
		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ul>
	<li>Escaped: ';
		echo LR\Filters::escapeHtmlText($hello) /* line %d% */;
		echo '</li>
	<li>Non-escaped: ';
		echo $hello /* line %d% */;
		echo '</li>
	<li>Escaped expression: ';
		echo LR\Filters::escapeHtmlText('<' . 'b' . '>hello' . '</b>') /* line %d% */;
		echo '</li>
	<li>Non-escaped expression: ';
		echo '<' . 'b' . '>hello' . '</b>' /* line %d% */;
		echo '</li>
	<li>Array access: ';
		echo LR\Filters::escapeHtmlText($people[1]) /* line %d% */;
		echo '</li>
	<li>Html: ';
		echo LR\Filters::escapeHtmlText($el) /* line %d% */;
		echo ' ';
		echo LR\Filters::escapeHtmlText($el2) /* line %d% */;
		echo '</li>
	<li>Translated: ';
		echo LR\Filters::escapeHtmlText(($this->filters->translate)($people[1])) /* line %d% */;
		echo '</li>
	<li>Translated string: ';
		echo LR\Filters::escapeHtmlText(($this->filters->translate)('ahoj')) /* line %d% */;
		echo '</li>
	<li>Non-escaped and translated: ';
		echo ($this->filters->translate)($people[1]) /* line %d% */;
		echo '</li>
	<li>Condition: ';
		echo LR\Filters::escapeHtmlText($hello ? 'yes' : null) /* line %d% */;
		echo ' ';
		echo LR\Filters::escapeHtmlText($hello ? 'yes' : null) /* line %d% */;
		echo '</li>
	<li>Array: ';
		echo LR\Filters::escapeHtmlText(($this->filters->join)($hello ? (['a', 'b', 'c']) : null)) /* line %d% */;
		echo ' ';
		echo LR\Filters::escapeHtmlText(($this->filters->join)(['a', 'b', $hello ? 'c' : null])) /* line %d% */;
		echo '</li>
</ul>

<input/> <input /> <input>

<input checked> <input checked="checked">

{ test} {"test} {\'test}

<p val = ';
		if (true) /* line %d% */ {
			echo '"a"';
		} else /* line %d% */ {
			echo '"b"';
		}
		echo '> </p>

<p val0 val1 = tmp val2=tmp val3="x"></p> </p>

<p val = ';
		echo LR\Filters::escapeHtmlAttrUnquoted($xss) /* line %d% */;
		echo ' val2=';
		echo LR\Filters::escapeHtmlAttrUnquoted($mxss) /* line %d% */;
		echo '> </p>

<p onclick = ';
		echo LR\Filters::escapeHtmlAttrUnquoted($xss) /* line %d% */;
		echo '> </p>

<p ONCLICK ="';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($xss)) /* line %d% */;
		echo '" ';
		echo LR\Filters::escapeHtmlAttrUnquoted($xss) /* line %d% */;
		echo '> </p>

<p val = />';
		echo LR\Filters::escapeHtmlText($xss) /* line %d% */;
		echo '</p>

';
		echo LR\Filters::escapeHtmlText((string) (bool) (float) (int) (array) 10) /* line %d% */;
		echo '

';
		if ($hello) /* line %d% */ {
			echo '	';
			echo LR\Filters::escapeHtmlText($hello) /* line %d% */;
			echo "\n";
		} elseif ($any) /* line %d% */ {
			echo '	';
			echo LR\Filters::escapeHtmlText($any) /* line %d% */;
			echo "\n";
		} else /* line %d% */ {
			echo '	none
';
		}
		echo '

';
		$iterations = 0;
		foreach ($iterator = $ʟ_it = new LR\CachingIterator(array(true), $ʟ_it ?? null) as $foo) /* line %d% */ {
			$iterations = 0;
			foreach ($iterator = $ʟ_it = new LR\CachingIterator($people, $ʟ_it ?? null) as $person) /* line %d% */ {
				echo '	';
				if ($iterator->isFirst()) /* line %d% */ {
					echo '<ul>';
				}
				echo '
	<li id="item-';
				echo LR\Filters::escapeHtmlAttr($iterator->getCounter()) /* line %d% */;
				echo '" class="';
				echo LR\Filters::escapeHtmlAttr($iterator->isOdd() ? 'odd' : 'even') /* line %d% */;
				echo '">';
				echo LR\Filters::escapeHtmlText($person) /* line %d% */;
				echo '</li>
	';
				if ($iterator->isLast()) /* line %d% */ {
					echo '</ul>';
				}
				echo "\n";
				$iterations++;
			}
			$iterator = $ʟ_it = $ʟ_it->getParent();
			$iterations++;
		}
		$iterator = $ʟ_it = $ʟ_it->getParent();
		echo '


<STYLE type="text/css">
<!--
#';
		echo LR\Filters::escapeCss($xss) /* line %d% */;
		echo ' {
	background: blue;
}
-->
</style>



<script>
<!--
alert(\'</div>\');

var prop = ';
		echo LR\Filters::escapeJs($people) /* line %d% */;
		echo ';

document.getElementById(';
		echo LR\Filters::escapeJs($xss) /* line %d% */;
		echo ').style.backgroundColor = \'red\';

var html = ';
		echo LR\Filters::escapeJs($el) /* line %d% */;
		echo ' || ';
		echo LR\Filters::escapeJs($el2) /* line %d% */;
		echo ';
-->
</script>


<SCRIPT>
/* <![CDATA[ */

var prop2 = ';
		echo LR\Filters::escapeJs($people) /* line %d% */;
		echo ';

/* ]]> */
</script>


<p onclick =
\'alert(';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($xss)) /* line %d% */;
		echo ');alert("hello");\'
 title=\'';
		echo LR\Filters::escapeHtmlAttr($xss) /* line %d% */;
		echo '\'
 STYLE =
 "color:';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeCss($xss)) /* line %d% */;
		echo ';"
 rel="';
		echo LR\Filters::escapeHtmlAttr($xss) /* line %d% */;
		echo '"
 onblur="alert(';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($xss)) /* line %d% */;
		echo ')"
 alt=\'';
		echo LR\Filters::escapeHtmlAttr($el) /* line %d% */;
		echo ' ';
		echo LR\Filters::escapeHtmlAttr($el2) /* line %d% */;
		echo '\'
 onfocus="alert(';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($el)) /* line %d% */;
		echo ')"
>click on me ';
		echo LR\Filters::escapeHtmlText($xss) /* line %d% */;
		echo '</p>



';
		$counter = 0 /* line %d% */;
		if ($this->getParentName()) {
			return get_defined_vars();
		}
		$this->renderBlock('menu', get_defined_vars()) /* line %d% */;
		echo '


';
		extract(['varx' => 2], EXTR_SKIP) /* line %d% */;
		echo LR\Filters::escapeHtmlText($varx) /* line %d% */;
		echo "\n";
		extract(['varx' => 4], EXTR_SKIP) /* line %d% */;
		echo LR\Filters::escapeHtmlText($varx) /* line %d% */;
		echo '

';
		$varx = 8 /* line %d% */;
		echo LR\Filters::escapeHtmlText($varx) /* line %d% */;
		echo "\n";
		$varx = 9 /* line %d% */;
		echo LR\Filters::escapeHtmlText($varx) /* line %d% */;
		echo '

';
		$now = new DateTime /* line %d% */;
		$foo = $now->format('u') /* line %d% */;
		extract(['foo' => $now->format('u')], EXTR_SKIP) /* line %d% */;
		echo '


</ul>


';
		echo 'test' /* line %d% */;
		echo '

{ }

';
		ob_start(function () {}) /* line %d% */;
		try {
			echo 'true';

		} finally {
			$ʟ_ifA = ob_get_clean();
		}
		if (true) /* line %d% */ {
			echo $ʟ_ifA;
		}
		echo "\n";
		ob_start(function () {}) /* line %d% */;
		try {
			echo 'false';

		} finally {
			$ʟ_ifA = ob_get_clean();
		}
		if (false) /* line %d% */ {
			echo $ʟ_ifA;
		}
		echo "\n";
		ob_start(function () {}) /* line %d% */;
		try {
			echo 'true';
			ob_start(function () {}) /* line %d% */;
			try {
				echo 'false';

			} finally {
				$ʟ_ifB = ob_get_clean();
			}
		} finally {
			$ʟ_ifA = ob_get_clean();
		}
		echo (true) ? $ʟ_ifA : $ʟ_ifB /* line %d% */;
		echo '


';
		$ʟ_switch = (2) /* line %d% */;
		if (false) {
		} elseif (in_array($ʟ_switch, ['x'], true)) /* line %d% */ {
			echo 'x
';
		} elseif (in_array($ʟ_switch, [2], true)) /* line %d% */ {
			echo 'y
';
		} else /* line %d% */ {
			echo 'z
';
		}
		echo "\n";
		echo ($this->filters->breaklines)("\n") /* line %d% */;
		echo '


<button></button>

<button></button> xx
';
		return get_defined_vars();
	}


	public function prepare(): void
	{
		extract($this->params);
		if (!$this->getReferringTemplate() || $this->getReferenceType() === "extends") {
			foreach (array_intersect_key(['person' => '47', 'foo' => '46', 'item' => '104'], $this->params) as $ʟ_v => $ʟ_l) {
				trigger_error("Variable \$$ʟ_v overwritten in foreach on line $ʟ_l");
			}
		}

	}


	/** {block menu} on line %d% */
	public function blockMenu(array $ʟ_args): void
	{
		extract($this->params);
		extract($ʟ_args);
		unset($ʟ_args);
		echo '<ul>
';
		$iterations = 0;
		foreach ($iterator = $ʟ_it = new LR\CachingIterator($menu, $ʟ_it ?? null) as $item) /* line %d% */ {
			echo '	<li>';
			echo LR\Filters::escapeHtmlText($counter++) /* line %d% */;
			echo ' ';
			if (is_array($item)) /* line %d% */ {
				echo ' ';
				$this->renderBlock('menu', ['menu' => $item] + get_defined_vars(), 'html') /* line %d% */;
				echo ' ';
			} else /* line %d% */ {
				echo LR\Filters::escapeHtmlText($item) /* line %d% */;
			}
			echo '</li>
';
			$iterations++;
		}
		$iterator = $ʟ_it = $ʟ_it->getParent();
		echo '</ul>
';
	}

}
