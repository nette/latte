<?php
%A%
final class Template%a% extends Latte\Runtime\Template
{

	public function main(): array
	{
%A%
		echo '<ul>
	<li>lower: ';
		echo LR\Filters::escapeHtmlText(($this->filters->lower)($hello)) /* line %d% */;
		echo '</li>
	<li>upper: ';
		echo LR\Filters::escapeHtmlText(($this->filters->upper)($hello)) /* line %d% */;
		echo '</li>
	<li>lower & capitalize: ';
		echo LR\Filters::escapeHtmlText(($this->filters->capitalize)(($this->filters->lower)($hello))) /* line %d% */;
		echo '</li>
	<li>breaklines: ';
		echo LR\Filters::escapeHtmlText(($this->filters->breaklines)($hello)) /* line %d% */;
		echo '</li>
	<li>truncate: ';
		echo LR\Filters::escapeHtmlText(($this->filters->lower)(($this->filters->truncate)($hello, "10"))) /* line %d% */;
		echo '</li>
	<li>date: ';
		echo LR\Filters::escapeHtmlText(($this->filters->date)($date, 'j. n. Y H:i:s')) /* line %d% */;
		echo '</li>
	<li>translated: ';
		echo LR\Filters::escapeHtmlText(($this->filters->truncate)(($this->filters->translate)($hello), 3)) /* line %d% */;
		echo '</li>
	<li>Translated HTML: ';
		ob_start(fn() => '');
		try {
			echo LR\Filters::escapeHtmlText($hello) /* line %d% */;

		} finally {
			$ʟ_tmp = ob_get_clean();
		}
		$ʟ_fi = new LR\FilterInfo('html');
		echo LR\Filters::convertTo($ʟ_fi, 'html', $this->filters->filterContent('translate', $ʟ_fi, $ʟ_tmp)) /* line %d% */;
		echo '</li>
	<li>Translated HTML: ';
		$ʟ_fi = new LR\FilterInfo('html');
		echo LR\Filters::convertTo($ʟ_fi, 'html', $this->filters->filterContent('translate', $ʟ_fi, 'ahoj')) /* line %d% */;
		echo '</li>
	<li>Translated HTML: ';
		$ʟ_fi = new LR\FilterInfo('html');
		echo LR\Filters::convertTo($ʟ_fi, 'html', $this->filters->filterContent('translate', $ʟ_fi, 'ahoj')) /* line %d% */;
		echo '</li>
	<li>Translated HTML: ';
		echo LR\Filters::escapeHtmlText(($this->filters->translate)('ahoj|ahojahojahojahoj')) /* line %d% */;
		echo '</li>
	<li>spaces: ';
		echo LR\Filters::escapeHtmlText(($this->filters->types)($hello , '' , "" , "$hello")) /* line %d% */;
		echo '</li>
	<li>dynamic: ';
		echo LR\Filters::escapeHtmlText(($this->filters->dynamic)($hello)) /* line %d% */;
		echo ' ';
		echo LR\Filters::escapeHtmlText(($this->filters->dynamic2)($hello)) /* line %d% */;
		echo '</li>
</ul>

<ul>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->h2)(($this->filters->h1)($hello))) /* line %d% */;
		echo '</li>
	<li>';
		echo ($this->filters->h2)(($this->filters->h1)($hello)) /* line %d% */;
		echo '</li>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->h1)(($this->filters->h2)($hello))) /* line %d% */;
		echo '</li>
	<li>';
		echo ($this->filters->h1)(($this->filters->h2)($hello)) /* line %d% */;
		echo '</li>
</ul>

<ul>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->types)((int)$hello*0, 0,0.0,"0")) /* line %d% */;
		echo '</li>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->types)((int)$hello*1, 1,"1")) /* line %d% */;
		echo '</li>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->types)($hello, true,null,false)) /* line %d% */;
		echo '</li>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->types)($hello, TRUE,NULL,FALSE)) /* line %d% */;
		echo '</li>
	<li>';
		echo LR\Filters::escapeHtmlText(($this->filters->types)($hello, '',"","$hello")) /* line %d% */;
		echo '</li>
</ul>



';
		ob_start(fn() => '') /* line %d% */;
		try {
			echo '  <a   href="#"> test</a
>
A   A

<script>
// comment
alert();
</script>
';
		} finally {
			$ʟ_fi = new LR\FilterInfo('html');
			echo LR\Filters::convertTo($ʟ_fi, 'html', $this->filters->filterContent('strip', $ʟ_fi, ob_get_clean()));
		}
		echo '


';
		ob_start(fn() => '') /* line %d% */;
		try {
			echo '<ul>
	<li>lower: ';
			echo LR\Filters::escapeHtmlText(($this->filters->lower)($hello)) /* line %d% */;
			echo '</li>
</ul>
';
		} finally {
			$ʟ_tmp = ob_get_length() ? new LR\Html(ob_get_clean()) : ob_get_clean();
		}
		$ʟ_fi = new LR\FilterInfo('html');
		$capture = $ʟ_tmp;

		echo '
<p>
Captured: ';
		echo LR\Filters::escapeHtmlText($capture) /* line %d% */;
		echo '
</p>


';
		ob_start(fn() => '') /* line %d% */;
		try {
			echo 'Hello
';

		} finally {
			$ʟ_tmp = ob_get_length() ? new LR\Html(ob_get_clean()) : ob_get_clean();
		}
		$ʟ_fi = new LR\FilterInfo('html');
		$capture = $this->filters->filterContent('upper', $ʟ_fi, $this->filters->filterContent('striphtml', $ʟ_fi, $ʟ_tmp));

		echo '
<p>
Captured with modifier: ';
		echo LR\Filters::escapeHtmlText($capture) /* line %d% */;
		echo '
</p>



<p>
Nested blocks: ';
		ob_start(fn() => '') /* line %d% */;
		try {
			echo ' Outer   ';
			ob_start(fn() => '') /* line %d% */;
			try {
				echo ' Inner Block ';

			} finally {
				$ʟ_fi = new LR\FilterInfo('html');
				echo LR\Filters::convertTo($ʟ_fi, 'html', $this->filters->filterContent('upper', $ʟ_fi, $this->filters->filterContent('striphtml', $ʟ_fi, ob_get_clean())));
			}
			echo '  Block ';

		} finally {
			$ʟ_fi = new LR\FilterInfo('html');
			echo LR\Filters::convertTo($ʟ_fi, 'html', $this->filters->filterContent('truncate', $ʟ_fi, $this->filters->filterContent('striphtml', $ʟ_fi, ob_get_clean()), 20));
		}
		echo '
</p>


<ul>
	<li>padLeft: ';
		echo LR\Filters::escapeHtmlText(($this->filters->padleft)($hello, 20)) /* line %d% */;
		echo '</li>
	<li>padRight: ';
		echo LR\Filters::escapeHtmlText(($this->filters->padright)($hello, 20,'*')) /* line %d% */;
		echo '</li>
</ul>
';
%A%
