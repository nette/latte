<?php
// source: %A%

class Template%a% extends Latte\Template
{
	public $blocks = [
		'title' => ['blockTitle', 'html'],
		'content' => ['blockContent', 'html'],
	];


	function render()
	{
%A%
<?php
		ob_start(function () {});
		$this->createTemplate('includeblock.inc.latte', get_defined_vars(), "includeblock", 'html')->render();
		echo rtrim(ob_get_clean()) ?>


<?php
		if ($this->tryRenderParent(get_defined_vars())) return;
		call_user_func(reset($this->blockQueue['title']), get_defined_vars());
		?>

<?php
		call_user_func(reset($this->blockQueue['content']), get_defined_vars());

	}


	function getParentName()
	{
		%A%return "inheritance.parent.latte";%A%
	}


	function blockTitle($_args)
	{
		extract($_args);
		?>Homepage | <?php
		if ('html' !== $this->blockTypes['title']) {
			trigger_error('Incompatible context for including block title.', E_USER_WARNING);
		}
		$this->renderBlockParent('title', get_defined_vars());
		if ('html' !== $this->blockTypes['title']) {
			trigger_error('Incompatible context for including block title.', E_USER_WARNING);
		}
		$this->renderBlockParent('title', get_defined_vars());
	}


	function blockContent($_args)
	{
		extract($_args);
		?>
	<ul>
<?php
		$iterations = 0;
		if (isset($this->params['person'])) trigger_error('Variable $person overwritten in foreach.');
		foreach ($people as $person) {
			?>		<li><?php echo LFilters::escapeHtmlText($person) ?></li>
<?php
			$iterations++;
		}
		?>
	</ul>
	Parent: <?php echo LFilters::escapeHtmlText(gettype($this->getReferringTemplate())) ?>

<?php
	}

}
