<?php
// source: %A%

final class Template%a% extends Latte\Runtime\Template
{
	protected const BLOCKS = [
		['menu' => 'blockMenu'],
	];


	public function main(): array
	{
		extract($this->params);
		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ul>
	<li>Escaped: ';
		echo LR\Filters::escapeHtmlText($hello) /* line 4 */;
		echo '</li>
	<li>Non-escaped: ';
		echo $hello /* line 5 */;
		echo '</li>
	<li>Escaped expression: ';
		echo LR\Filters::escapeHtmlText('<' . 'b' . '>hello' . '</b>') /* line 6 */;
		echo '</li>
	<li>Non-escaped expression: ';
		echo '<' . 'b' . '>hello' . '</b>' /* line 7 */;
		echo '</li>
	<li>Array access: ';
		echo LR\Filters::escapeHtmlText($people[1]) /* line 8 */;
		echo '</li>
	<li>Html: ';
		echo LR\Filters::escapeHtmlText($el) /* line 9 */;
		echo ' ';
		echo LR\Filters::escapeHtmlText($el2) /* line 9 */;
		echo '</li>
	<li>Translated: ';
		echo LR\Filters::escapeHtmlText(($this->filters->translate)($people[1]));
		echo '</li>
	<li>Translated string: ';
		echo LR\Filters::escapeHtmlText(($this->filters->translate)('ahoj'));
		echo '</li>
	<li>Non-escaped and translated: ';
		echo ($this->filters->translate)($people[1]);
		echo '</li>
	<li>Condition: ';
		echo LR\Filters::escapeHtmlText($hello ? 'yes' : null) /* line 13 */;
		echo ' ';
		echo LR\Filters::escapeHtmlText($hello ? 'yes' : null) /* line 13 */;
		echo '</li>
	<li>Array: ';
		echo LR\Filters::escapeHtmlText(($this->filters->join)($hello ? (['a', 'b', 'c']) : null)) /* line 14 */;
		echo ' ';
		echo LR\Filters::escapeHtmlText(($this->filters->join)(['a', 'b', $hello ? 'c' : null])) /* line 14 */;
		echo '</li>
</ul>

<input> <input> <input>

<input checked> <input checked="checked">

{ test} {"test} {\'test}

<p val = ';
		if (true) {
			echo '"a"';
		}
		else {
			echo '"b"';
		}
		echo '> </p>

<p val0 val1 = tmp val2=tmp val3="x"></p> </p>

<p val = ';
		echo LR\Filters::escapeHtmlAttrUnquoted($xss) /* line 27 */;
		echo ' val2=';
		echo LR\Filters::escapeHtmlAttrUnquoted($mxss) /* line 27 */;
		echo '> </p>

<p onclick = ';
		echo LR\Filters::escapeHtmlAttrUnquoted($xss) /* line 29 */;
		echo '> </p>

<p ONCLICK ="';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($xss)) /* line 31 */;
		echo '" ';
		echo LR\Filters::escapeHtmlAttrUnquoted($xss) /* line 31 */;
		echo '> </p>

<p val = />';
		echo LR\Filters::escapeHtmlText($xss) /* line 33 */;
		echo '</p>

';
		echo LR\Filters::escapeHtmlText((string) (bool) (float) (int) (array) 10) /* line 35 */;
		echo '

';
		if ($hello) {
			echo '	';
			echo LR\Filters::escapeHtmlText($hello) /* line 38 */;
			echo "\n";
		}
		elseif ($any) {
			echo '	';
			echo LR\Filters::escapeHtmlText($any) /* line 40 */;
			echo "\n";
		}
		else {
			echo '	none
';
		}
		echo '

';
		$iterations = 0;
		foreach ($iterator = $__it = new LR\CachingIterator(array(true), $__it ?? null) as $foo) {
			$iterations = 0;
			foreach ($iterator = $__it = new LR\CachingIterator($people, $__it ?? null) as $person) {
				echo '	';
				if ($iterator->isFirst()) {
					echo '<ul>';
				}
				echo '
	<li id="item-';
				echo LR\Filters::escapeHtmlAttr($iterator->getCounter()) /* line 49 */;
				echo '" class="';
				echo LR\Filters::escapeHtmlAttr($iterator->isOdd() ? 'odd' : 'even') /* line 49 */;
				echo '">';
				echo LR\Filters::escapeHtmlText($person) /* line 49 */;
				echo '</li>
	';
				if ($iterator->isLast()) {
					echo '</ul>';
				}
				echo "\n";
				$iterations++;
			}
			$iterator = $__it = $__it->getParent();
			$iterations++;
		}
		$iterator = $__it = $__it->getParent();
		echo '


<STYLE type="text/css">
<!--
#';
		echo LR\Filters::escapeCss($xss) /* line 58 */;
		echo ' {
	background: blue;
}
-->
</style>



<script>
<!--
alert(\'</div>\');

var prop = ';
		echo LR\Filters::escapeJs($people) /* line 70 */;
		echo ';

document.getElementById(';
		echo LR\Filters::escapeJs($xss) /* line 72 */;
		echo ').style.backgroundColor = \'red\';

var html = ';
		echo LR\Filters::escapeJs($el) /* line 74 */;
		echo ' || ';
		echo LR\Filters::escapeJs($el2) /* line 74 */;
		echo ';
-->
</script>


<SCRIPT>
/* <![CDATA[ */

var prop2 = ';
		echo LR\Filters::escapeJs($people) /* line 82 */;
		echo ';

/* ]]> */
</script>


<p onclick =
\'alert(';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($xss)) /* line 89 */;
		echo ');alert("hello");\'
 title=\'';
		echo LR\Filters::escapeHtmlAttr($xss) /* line 90 */;
		echo '\'
 STYLE =
 "color:';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeCss($xss)) /* line 92 */;
		echo ';"
 rel="';
		echo LR\Filters::escapeHtmlAttr($xss) /* line 93 */;
		echo '"
 onblur="alert(';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($xss)) /* line 94 */;
		echo ')"
 alt=\'';
		echo LR\Filters::escapeHtmlAttr($el) /* line 95 */;
		echo ' ';
		echo LR\Filters::escapeHtmlAttr($el2) /* line 95 */;
		echo '\'
 onfocus="alert(';
		echo LR\Filters::escapeHtmlAttr(LR\Filters::escapeJs($el)) /* line 96 */;
		echo ')"
>click on me ';
		echo LR\Filters::escapeHtmlText($xss) /* line 97 */;
		echo '</p>



';
		$counter = 0;
		if ($this->getParentName()) {
			return get_defined_vars();
		}
		$this->renderBlock('menu', get_defined_vars());
		echo '

';
		extract(['varx' => 2], EXTR_SKIP);
		echo LR\Filters::escapeHtmlText($varx) /* line 111 */;
		echo "\n";
		extract(['varx' => 4], EXTR_SKIP);
		echo LR\Filters::escapeHtmlText($varx) /* line 112 */;
		echo '

';
		$varx = 8;
		echo LR\Filters::escapeHtmlText($varx) /* line 114 */;
		echo "\n";
		$varx = 9;
		echo LR\Filters::escapeHtmlText($varx) /* line 115 */;
		echo '

';
		$now = new DateTime;
		$foo = $now->format('u');
		extract(['foo' => $now->format('u')], EXTR_SKIP);
		echo '


</ul>


';
		echo 'test';
		echo '

{ }

';
		ob_start(function () {});
		echo 'true';
		if (true) echo ob_get_clean();
		else ob_end_clean();
		echo "\n";
		ob_start(function () {});
		echo 'false';
		if (false) echo ob_get_clean();
		else ob_end_clean();
		echo "\n";
		ob_start(function () {});
		echo 'true';
		ob_start(function () {});
		echo 'false';
		if (true) {
			ob_end_clean();
			echo ob_get_clean();
		}
		else {
			$__tmp = ob_get_clean();
			ob_end_clean();
			echo $__tmp;
		}
		echo '


';
		$__switch = (2);
		if (false) {
		}
		elseif (in_array($__switch, ['x'], true)) {
			echo 'x
';
		}
		elseif (in_array($__switch, [2], true)) {
			echo 'y
';
		}
		else {
			echo 'z
';
		}
		echo "\n";
		echo ($this->filters->breaklines)("\n") /* line 145 */;
		echo '


<button></button>

<button></button> xx
';
		return get_defined_vars();
	}


	public function prepare(): void
	{
		extract($this->params);
		if (!$this->getReferringTemplate() || $this->getReferenceType() === "extends") {
			foreach (array_intersect_key(['person' => '47', 'foo' => '46', 'item' => '104'], $this->params) as $__v => $__l) {
				trigger_error("Variable \$$__v overwritten in foreach on line $__l");
			}
		}

	}


	public function blockMenu(array $__args): void
	{
		extract($this->params);
		extract($__args);
		echo '<ul>
';
		$iterations = 0;
		foreach ($iterator = $__it = new LR\CachingIterator($menu, $__it ?? null) as $item) {
			echo '	<li>';
			echo LR\Filters::escapeHtmlText($counter++) /* line 105 */;
			echo ' ';
			if (is_array($item)) {
				echo ' ';
				$this->renderBlock($__nm = 'menu', ['menu' => $item] + get_defined_vars(), 'html');
				echo ' ';
			}
			else {
				echo LR\Filters::escapeHtmlText($item) /* line 105 */;
			}
			echo '</li>
';
			$iterations++;
		}
		$iterator = $__it = $__it->getParent();
		echo '</ul>
';
	}

}
