<?php
// source: %A%

class Template%a% extends Latte\Template
{

	function render()
	{
		foreach ($this->params as $__k => $__v) $$__k = $__v; unset($__k, $__v);

// prolog Latte\Macros\CoreMacros
list($_b, $_g, $_l) = $this->initialize('xhtml')
;
// prolog Latte\Macros\BlockMacros
$_b->blocks['menu'][] = [$this, 'block_menu_%h%'];

// template extending

$_l->extends = empty($_g->extended) && isset($_control) && $_control instanceof Nette\Application\UI\Presenter ? $_control->findLayoutTemplateFile() : NULL; $_g->extended = TRUE;

if ($_l->extends) { ob_start(function () {});}

// main template
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ul>
	<li>Escaped: <?php echo LFilters::escapeHtmlText($hello) ?></li>
	<li>Non-escaped: <?php echo $hello ?></li>
	<li>Escaped expression: <?php echo LFilters::escapeHtmlText('<' . 'b' . '>hello' . '</b>') ?></li>
	<li>Non-escaped expression: <?php echo '<' . 'b' . '>hello' . '</b>' ?></li>
	<li>Array access: <?php echo LFilters::escapeHtmlText($people[1]) ?></li>
	<li>Html: <?php echo LFilters::escapeHtmlText($el) ?></li>
	<li>Translated: <?php echo LFilters::escapeHtmlText(call_user_func($this->filters->translate, $people[1])) ?></li>
	<li>Translated string: <?php echo LFilters::escapeHtmlText(call_user_func($this->filters->translate, 'ahoj')) ?></li>
	<li>Non-escaped and translated: <?php echo call_user_func($this->filters->translate, $people[1]) ?></li>
	<li>Condition: <?php echo LFilters::escapeHtmlText($hello ? 'yes' : NULL) ?> <?php echo LFilters::escapeHtmlText($hello ? 'yes' : NULL) ?></li>
	<li>Array: <?php echo LFilters::escapeHtmlText(call_user_func($this->filters->join, $hello ? ['a', 'b', 'c'] : NULL)) ?>
 <?php echo LFilters::escapeHtmlText(call_user_func($this->filters->join, ['a', 'b', $hello ? 'c' : NULL])) ?></li>
</ul>

<input /> <input /> <input />

<input checked /> <input checked="checked" />

{ test} {"test} {'test}

<p val = <?php if (true) { ?>"a"<?php } else { ?>"b"<?php } ?>> </p>

<p val0 val1 = tmp val2=tmp val3="x"></p> </p>

<p val = <?php echo LFilters::escapeHtmlAttrUnquoted($xss) ?> val2=<?php echo LFilters::escapeHtmlAttrUnquoted($mxss) ?>> </p>

<p onclick = <?php echo LFilters::escapeHtmlAttrUnquoted(LFilters::escapeJs($xss)) ?>> </p>

<p ONCLICK ="<?php echo LFilters::escapeHtmlAttr(LFilters::escapeJs($xss)) ?>" <?php echo LFilters::escapeHtmlAttrUnquoted($xss) ?>> </p>

<p val = /><?php echo LFilters::escapeHtmlText($xss) ?></p>

<?php echo LFilters::escapeHtmlText((string) (bool) (float) (int) (array) 10) ?>


<?php if ($hello) { ?>
	<?php echo LFilters::escapeHtmlText($hello) ?>

<?php } elseif ($any) { ?>
	<?php echo LFilters::escapeHtmlText($any) ?>

<?php } else { ?>
	none
<?php } ?>


<?php $iterations = 0; if (isset($this->params['foo'])) trigger_error('Variable $foo overwritten in foreach.', E_USER_NOTICE); foreach ($iterator = $_l->its[] = new Latte\Runtime\CachingIterator(array(TRUE)) as $foo) { $iterations = 0; if (isset($this->params['person'])) trigger_error('Variable $person overwritten in foreach.', E_USER_NOTICE); foreach ($iterator = $_l->its[] = new Latte\Runtime\CachingIterator($people) as $person) { ?>
	<?php if ($iterator->isFirst()) { ?><ul><?php } ?>

	<li id="item-<?php echo LFilters::escapeHtmlAttr($iterator->getCounter()) ?>" class="<?php echo LFilters::escapeHtmlAttr($iterator->isOdd() ? 'odd' : 'even') ?>
"><?php echo LFilters::escapeHtmlText($person) ?></li>
	<?php if ($iterator->isLast()) { ?></ul><?php } ?>

<?php $iterations++; } array_pop($_l->its); $iterator = end($_l->its) ;$iterations++; } array_pop($_l->its); $iterator = end($_l->its) ?>



<STYLE type="text/css">
<!--
#<?php echo LFilters::escapeCss($xss) ?> {
	background: blue;
}
-->
</style>



<script>
<!--
alert('</div>');

var prop = <?php echo LFilters::escapeJs($people) ?>;

document.getElementById(<?php echo LFilters::escapeJs($xss) ?>).style.backgroundColor = 'red';

var html = <?php echo LFilters::escapeJs($el) ?>;
-->
</script>


<SCRIPT>
/* <![CDATA[ */

var prop2 = <?php echo LFilters::escapeJs($people) ?>;

/* ]]> */
</script>


<p onclick =
'alert(<?php echo LFilters::escapeHtmlAttr(LFilters::escapeJs($xss)) ?>);alert("hello");'
 title='<?php echo LFilters::escapeHtmlAttr($xss) ?>'
 STYLE =
 "color:<?php echo LFilters::escapeHtmlAttr(LFilters::escapeCss($xss)) ?>;"
 rel="<?php echo LFilters::escapeHtmlAttr($xss) ?>"
 onblur="alert(<?php echo LFilters::escapeHtmlAttr(LFilters::escapeJs($xss)) ?>)"
 alt='<?php echo LFilters::escapeHtmlAttr($el) ?>'
 onfocus="alert(<?php echo LFilters::escapeHtmlAttr(LFilters::escapeJs($el)) ?>)"
>click on me <?php echo LFilters::escapeHtmlText($xss) ?></p>



<?php $counter = 0 ;if ($_l->extends) { ob_end_clean(); return $this->renderChildTemplate($_l->extends, get_defined_vars()); }
call_user_func(reset($_b->blocks['menu']), $_b, get_defined_vars())  ?>


<?php extract(['varx' => 2], EXTR_SKIP) ;echo LFilters::escapeHtmlText($varx) ?>

<?php extract(['varx' => 4], EXTR_SKIP) ;echo LFilters::escapeHtmlText($varx) ?>


<?php $varx = 8 ;echo LFilters::escapeHtmlText($varx) ?>

<?php $varx = 9 ;echo LFilters::escapeHtmlText($varx) ?>


<?php $now = new DateTime ;$foo = $now->format('u') ;extract(['foo' => $now->format('u')], EXTR_SKIP) ?>



</ul>


<?php echo 'test' ?>


{ }

<?php ob_start(function () {}) ?>TRUE<?php if (TRUE) echo ob_get_clean(); else ob_end_clean() ?>

<?php ob_start(function () {}) ?>FALSE<?php if (FALSE) echo ob_get_clean(); else ob_end_clean() ?>

<?php ob_start(function () {}) ?>TRUE<?php ob_start(function () {}) ?>FALSE<?php if (TRUE) { ob_end_clean(); echo ob_get_clean(); } else { $_l->else = ob_get_clean(); ob_end_clean(); echo $_l->else; } ?>



<?php $_l->switch[] = (2); if (FALSE) { } elseif (end($_l->switch) === ('x')) { ?>x
<?php } elseif (end($_l->switch) === (2)) { ?>y
<?php } else { ?>z
<?php } array_pop($_l->switch) ?>

<?php echo call_user_func($this->filters->nl2br, "\n") ?>



<button></button>

<button></button> xx
<?php
	}


	function block_menu_%h%($_b, $_args)
	{
		unset($_args["this"]); foreach ($_args as $__k => $__v) $$__k = $__v
?><ul>
<?php $iterations = 0; if (isset($this->params['item'])) trigger_error('Variable $item overwritten in foreach.', E_USER_NOTICE); foreach ($iterator = $_l->its[] = new Latte\Runtime\CachingIterator($menu) as $item) { ?>
	<li><?php echo LFilters::escapeHtmlText($counter++) ?> <?php if (is_array($item)) { ?>
 <?php call_user_func(reset($_b->blocks['menu']), $_b, ['menu' => $item] + get_defined_vars()) ?>
 <?php } else { echo LFilters::escapeHtmlText($item) ;} ?></li>
<?php $iterations++; } array_pop($_l->its); $iterator = end($_l->its) ?>
</ul>
<?php
	}

}
