<?php
// source: %A%

class Template%a% extends Latte\Template
{
	public $blocks = [
		'static' => 'blockStatic',
	];

	public $blockTypes = [
		'static' => 'html',
	];


	function render()
	{
%A%
// prolog Latte\Macros\BlockMacros
// template extending

$_l->extends = empty($_g->extended) && isset($_control) && $_control instanceof Nette\Application\UI\Presenter ? $_control->findLayoutTemplateFile() : NULL; $_g->extended = TRUE;

if ($_l->extends) { ob_start(function () {});}

// main template
$var = 10 ?>

<?php if ($_l->extends) { ob_end_clean(); return $this->renderChildTemplate($_l->extends, get_defined_vars()); }
call_user_func(reset($_b->blocks['static']), $_b, get_defined_vars())  ?>


<?php %a% foreach ($iterator = $_l->its[] = new Latte\Runtime\CachingIterator(['dynamic', 'static']) as $name) { Latte\Macros\BlockMacrosRuntime::checkType('html', $_b->types, $name);$_b->blocks[$name][] = [$this, 'blockName_%h%']; call_user_func(reset($_b->blocks[$name]), $_b, get_defined_vars()) ?>

<?php $iterations++; } array_pop($_l->its); $iterator = end($_l->its) ?>

<?php if ('html' !== $_b->types['dynamic']) { trigger_error('Incompatible context for including block dynamic.', E_USER_WARNING); }
Latte\Macros\BlockMacrosRuntime::callBlock($_b, 'dynamic', ['var' => 20] + $this->params) ?>

<?php if ('html' !== $_b->types['static']) { trigger_error('Incompatible context for including block static.', E_USER_WARNING); }
call_user_func(reset($_b->blocks['static']), $_b, ['var' => 30] + get_defined_vars()) ?>

<?php if ('html' !== $_b->types[$name]) { trigger_error('Incompatible context for including block $name.', E_USER_WARNING); }
Latte\Macros\BlockMacrosRuntime::callBlock($_b, $name, ['var' => 40] + $this->params) ?>

<?php Latte\Macros\BlockMacrosRuntime::checkType('html', $_b->types, "word$name");$_b->blocks["word$name"][] = [$this, 'blockWordname_%h%']; call_user_func(reset($_b->blocks["word$name"]), $_b, get_defined_vars()) ?>

<?php Latte\Macros\BlockMacrosRuntime::checkType('html', $_b->types, "word$name");$_b->blocks["word$name"][] = [$this, 'blockWordname_%h%']; call_user_func(reset($_b->blocks["word$name"]), $_b, get_defined_vars()) ?>

<?php
	}


	function blockName_9b395($_b, $_args)
	{
		unset($_args["this"]); foreach ($_args as $__k => $__v) $$__k = $__v
?>
		Dynamic block #<?php echo LFilters::escapeHtmlText($var) ?>

<?php
	}


	function blockWordname_a7002($_b, $_args)
	{
		unset($_args["this"]); foreach ($_args as $__k => $__v) $$__k = $__v;

	}


	function blockWordname_0f83e($_b, $_args)
	{
		unset($_args["this"]); foreach ($_args as $__k => $__v) $$__k = $__v;

	}


	function blockStatic($_b, $_args)
	{
		unset($_args["this"]); foreach ($_args as $__k => $__v) $$__k = $__v
?>	Static block #<?php echo LFilters::escapeHtmlText($var) ?>

<?php
	}

}
