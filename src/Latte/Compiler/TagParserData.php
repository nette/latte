<?php

/**
 * This file is part of the Latte (https://latte.nette.org)
 * Copyright (c) 2008 David Grudl (https://davidgrudl.com)
 */

declare(strict_types=1);

namespace Latte\Compiler;

use Latte\Compiler\Nodes\Php as Node;
use Latte\Compiler\Nodes\Php\Expression;
use Latte\Compiler\Nodes\Php\Scalar;
use function array_pop, count, is_string, substr;


/** @internal generated trait used by TagParser */
abstract class TagParserData
{
	/** Symbol number of error recovery token */
	protected const ErrorSymbol = 1;

	/** Action number signifying default action */
	protected const DefaultAction = -8190;

	/** Rule number signifying that an unexpected token was encountered */
	protected const UnexpectedTokenRule = 8191;

	protected const Yy2Tblstate = 260;

	/** Number of non-leaf states */
	protected const NumNonLeafStates = 355;

	/** Map of lexer tokens to internal symbols */
	protected const TokenToSymbol = [
		0,     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   49,    109,   114,   110,   48,    114,   114,
		103,   104,   46,    44,    2,     45,    40,    47,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   22,    107,
		36,    7,     38,    21,    60,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   62,    114,   108,   28,    114,   114,   101,   114,   114,
		114,   99,    102,   114,   114,   114,   114,   114,   114,   100,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   105,   26,    106,   51,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   1,     3,     4,     5,
		6,     8,     9,     10,    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,    23,    24,    25,    27,    29,    30,
		31,    32,    33,    34,    35,    37,    39,    41,    42,    43,    50,    52,    53,    54,    55,    56,    57,    58,    59,    61,
		63,    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
		83,    84,    85,    86,    87,    88,    89,    90,    91,    111,   92,    93,    94,    95,    112,   113,   96,    97,    98,
	];

	/** Map of states to a displacement into the self::Action table. The corresponding action for this
	 *  state/symbol pair is self::Action[self::ActionBase[$state] + $symbol]. If self::ActionBase[$state] is 0, the
	 *  action is defaulted, i.e. self::ActionDefault[$state] should be used instead. */
	protected const ActionBase = [
		338,   318,   318,   318,   318,   100,   122,   318,   275,   179,   232,   318,   399,   399,   399,   222,   222,   222,   222,   314,
		314,   305,   319,   443,   445,   446,   448,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -3,    243,   271,   454,   457,   455,   458,   474,   475,   471,   476,
		480,   52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    155,   104,   354,   157,   157,
		157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   260,   260,   260,   311,
		269,   207,   263,   405,   -31,   111,   111,   507,   507,   507,   507,   507,   440,   81,    81,    81,    81,    493,   493,   481,
		481,   481,   481,   481,   481,   481,   481,   481,   164,   123,   123,   279,   13,    259,   259,   259,   70,    70,    70,    70,
		70,    70,    70,    281,   109,   109,   109,   368,   402,   462,   339,   321,   321,   321,   321,   321,   321,   346,   483,   -22,
		133,   133,   156,   225,   225,   133,   436,   40,    231,   -35,   324,   371,   328,   146,   223,   2,     452,   298,   304,   329,
		36,    41,    222,   461,   461,   222,   222,   222,   453,   80,    80,    80,    42,    194,   187,   290,   460,   290,   290,   290,
		218,   -75,   306,   378,   367,   369,   306,   62,    140,   129,   379,   389,   378,   378,   169,   129,   129,   301,   313,   348,
		188,   136,   348,   308,   308,   186,   35,    392,   391,   394,   366,   362,   464,   206,   310,   350,   300,   358,   172,   392,
		391,   394,   315,   6,     353,   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,   206,   393,   43,    355,   395,
		396,   17,    409,   423,   466,   309,   467,   299,   344,   345,   297,   477,   357,   28,    206,   478,   463,   343,   317,   398,
		303,   479,   425,   332,   468,   214,   397,   228,   469,   235,   465,   312,   430,   302,   470,   0,     -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
		52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    0,     440,
		52,    52,    52,    52,    52,    52,    52,    0,     109,   109,   109,   109,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,
		-23,   -23,   -23,   109,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   0,     0,
		0,     0,     0,     0,     0,     436,   308,   308,   308,   308,   308,   308,   436,   436,   0,     0,     0,     0,     109,   109,
		0,     0,     436,   308,   0,     0,     0,     0,     0,     0,     0,     222,   222,   222,   436,   378,   0,     0,     308,   308,
		0,     0,     0,     306,   0,     0,     0,     0,     0,     0,     299,   43,    299,   299,   299,
	];

	/** Table of actions. Indexed according to self::ActionBase comment. */
	protected const Action = [
		33,    34,    -272,  31,    -272,  35,    -50,   36,    179,   180,   37,    38,    39,    40,    41,    42,    43,    -48,   1,     193,
		44,    561,   562,   207,   172,   543,   382,   -225,  -47,   559,   287,   526,   245,   246,   196,   0,     288,   289,   12,    382,
		-223,  290,   291,   210,   541,   7,     543,   -225,  -225,  -225,  545,   544,   567,   565,   566,   53,    54,    55,    13,    28,
		-223,  -223,  -223,  417,   11,    226,   292,   197,   198,   -223,  199,   545,   544,   22,    98,    56,    57,    58,    59,    292,
		60,    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
		80,    209,   195,   363,   364,   362,   -272,  -8190, -8190, 419,   -272,  418,   -8190, 81,    -8190, -8190, -8190, -8191, -8191, -8191,
		-8191, 72,    73,    74,    75,    363,   364,   362,   570,   361,   360,   14,    -8190, -187,  -8190, -8190, -8190, -8190, 20,    -8190,
		-8190, -8190, 101,   373,   196,   -187,  -80,   380,   -80,   381,   367,   361,   360,   76,    77,    78,    79,    80,    -8190, 195,
		-8190, -8190, -8190, 194,   45,    373,   419,   203,   418,   298,   81,    191,   367,   -80,   299,   369,   237,   238,   368,   374,
		300,   301,   363,   364,   362,   194,   45,    -47,   236,   203,   384,   298,   23,    178,   -23,   -220,  299,   369,   237,   238,
		368,   374,   300,   301,   430,   73,    74,    75,    361,   360,   -8190, -8190, -8190, 95,    24,    -220,  -220,  -220,  30,    419,
		105,   418,   373,   -270,  -220,  -270,  430,   -52,   -8190, 367,   -8190, -8190, -8190, -8190, 106,   363,   364,   362,   214,   215,
		216,   107,   194,   45,    200,   201,   203,   244,   298,   16,    -80,   361,   360,   299,   369,   237,   238,   368,   374,   300,
		301,   361,   360,   -8190, -8190, -8190, -8190, -8190, -8190, -8190, -8190, 25,    -8190, -8190, -8190, 373,   340,   18,    363,   364,
		362,   -8190, 367,   430,   -8190, -186,  -8190, -8190, -8190, -8190, -8190, -8190, -8190, -8190, -8190, 194,   45,    -186,  645,   203,
		196,   298,   646,   -22,   361,   360,   299,   369,   237,   238,   368,   374,   300,   301,   -8190, -8190, -8190, 96,    373,   108,
		-17,   363,   364,   362,   26,    367,   -16,   -270,  -268,  382,   -268,  -270,  -8190, 172,   -8190, -8190, 430,   17,    194,   45,
		195,   97,    203,   -226,  298,   -8190, 202,   361,   360,   299,   369,   237,   238,   368,   374,   300,   301,   -8190, -8190, -8190,
		81,    373,   49,    -226,  -226,  -226,  104,   100,   367,   292,   192,   102,   -186,  324,   647,   419,   103,   418,   382,   430,
		346,   194,   45,    -29,   -186,  203,   29,    298,   380,   280,   381,   -195,  299,   369,   237,   238,   368,   374,   300,   301,
		-255,  -8190, 363,   364,   362,   392,   211,   212,   213,   354,   46,    47,    15,    82,    83,    84,    85,    86,    87,    88,
		89,    90,    91,    92,    93,    94,    99,    571,   361,   360,   -226,  292,   -268,  228,   572,   -254,  -268,  32,    262,   3,
		177,   164,   373,   363,   364,   362,   243,   277,   -253,  367,   -226,  -226,  -226,  249,   250,   251,   -229,  471,   473,   -186,
		-228,  -227,  194,   45,    -222,  2,     203,   -220,  298,   4,     5,     -186,  6,     299,   369,   237,   238,   368,   374,   300,
		301,   8,     9,     373,   -222,  -222,  -222,  -220,  -220,  -220,  367,   100,   10,    -222,  27,    50,    -220,  51,    189,   190,
		242,   556,   279,   366,   365,   -229,  382,   377,   634,   378,   -8190, -8190, -8190, 514,   370,   369,   372,   371,   368,   374,
		375,   376,   361,   360,   -221,  21,    183,   557,   -8190, 431,   -8190, -8190, -8190, -8190, 529,   -8190, -8190, -8190, -8191, -8191,
		-8191, -8191, -8191, 1,     -221,  -221,  -221,  535,   253,   537,   539,   382,   589,   -221,  559,   1,     -29,   509,   332,   336,
		253,   548,   515,   382,   614,   -228,  559,   291,   19,    52,    261,   292,   642,   644,   393,   643,   525,   343,   290,   291,
		641,   598,   612,   0,     48,    586,   602,   637,   348,   0,     226,   292,   560,   0,     0,     0,     48,    0,     0,     0,
		0,     0,     226,   292,
	];

	/** Table indexed analogously to self::Action. If self::ActionCheck[self::ActionBase[$state] + $symbol] != $symbol
	 *  then the action is defaulted, i.e. self::ActionDefault[$state] should be used instead. */
	protected const ActionCheck = [
		44,    45,    0,     78,    2,     49,    0,     51,    52,    53,    54,    55,    56,    57,    58,    59,    60,    0,     62,    63,
		64,    65,    66,    67,    27,    69,    70,    62,    0,     73,    74,    106,   76,    77,    21,    0,     80,    81,    2,     70,
		62,    85,    86,    87,    67,    2,     69,    82,    83,    84,    94,    95,    96,    97,    98,    3,     4,     5,     22,    103,
		82,    83,    84,    86,    2,     109,   110,   26,    27,    91,    29,    94,    95,    21,    105,   23,    24,    25,    26,    110,
		28,    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
		48,    104,   50,    3,     4,     5,     104,   3,     4,     96,    108,   98,    72,    61,    3,     4,     5,     36,    37,    38,
		39,    40,    41,    42,    43,    3,     4,     5,     88,    29,    30,    2,     21,    91,    23,    24,    25,    26,    2,     28,
		29,    30,    2,     43,    21,    103,   0,     67,    2,     69,    50,    29,    30,    44,    45,    46,    47,    48,    3,     50,
		3,     4,     5,     63,    64,    43,    96,    67,    98,    69,    61,    2,     50,    27,    74,    75,    76,    77,    78,    79,
		80,    81,    3,     4,     5,     63,    64,    0,     2,     67,    2,     69,    92,    6,     22,    62,    74,    75,    76,    77,
		78,    79,    80,    81,    104,   41,    42,    43,    29,    30,    3,     4,     5,     7,     92,    82,    83,    84,    62,    96,
		6,     98,    43,    0,     91,    2,     104,   104,   21,    50,    23,    24,    25,    26,    6,     3,     4,     5,     82,    83,
		84,    6,     63,    64,    26,    27,    67,    91,    69,    6,     104,   29,    30,    74,    75,    76,    77,    78,    79,    80,
		81,    29,    30,    3,     4,     5,     3,     4,     5,     44,    45,    92,    3,     4,     5,     43,    45,    6,     3,     4,
		5,     21,    50,    104,   21,    91,    23,    24,    25,    26,    21,    28,    23,    24,    25,    63,    64,    103,   67,    67,
		21,    69,    71,    22,    29,    30,    74,    75,    76,    77,    78,    79,    80,    81,    3,     4,     5,     7,     43,    7,
		22,    3,     4,     5,     92,    50,    22,    104,   0,     70,    2,     108,   21,    27,    23,    24,    104,   22,    63,    64,
		50,    22,    67,    62,    69,    86,    29,    29,    30,    74,    75,    76,    77,    78,    79,    80,    81,    3,     4,     5,
		61,    43,    103,   82,    83,    84,    22,    92,    50,    110,   22,    62,    91,    68,    71,    96,    22,    98,    70,    104,
		79,    63,    64,    104,   103,   67,    62,    69,    67,    75,    69,    91,    74,    75,    76,    77,    78,    79,    80,    81,
		103,   72,    3,     4,     5,     92,    82,    83,    84,    107,   92,    93,    7,     8,     9,     10,    11,    12,    13,    14,
		15,    16,    17,    18,    19,    20,    105,   88,    29,    30,    62,    110,   104,   62,    88,    103,   108,   99,    100,   101,
		102,   91,    43,    3,     4,     5,     91,    104,   103,   50,    82,    83,    84,    82,    83,    84,    103,   52,    53,    91,
		103,   103,   63,    64,    62,    103,   67,    62,    69,    103,   103,   103,   103,   74,    75,    76,    77,    78,    79,    80,
		81,    103,   103,   43,    82,    83,    84,    82,    83,    84,    50,    92,    103,   91,    103,   103,   91,    103,   103,   103,
		103,   108,   104,   63,    64,    103,   70,    67,    72,    69,    3,     4,     5,     104,   74,    75,    76,    77,    78,    79,
		80,    81,    29,    30,    62,    89,    90,    104,   21,    104,   23,    24,    25,    26,    104,   28,    29,    30,    31,    32,
		33,    34,    35,    62,    82,    83,    84,    104,   67,    104,   104,   70,    104,   91,    73,    62,    104,   104,   104,   104,
		67,    104,   104,   70,    104,   103,   73,    86,    105,   105,   105,   110,   106,   106,   106,   106,   106,   106,   85,    86,
		106,   106,   106,   -1,    103,   108,   108,   108,   108,   -1,    109,   110,   109,   -1,    -1,    -1,    103,   -1,    -1,    -1,
		-1,    -1,    109,   110,
	];

	/** Map of states to their default action */
	protected const ActionDefault = [
		8191,  266,   266,   31,    266,   8191,  8191,  266,   8191,  8191,  8191,  29,    8191,  8191,  29,    8191,  8191,  8191,  8191,  39,
		29,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  218,   218,   218,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  10,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  29,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  267,   267,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  1,     273,   274,   85,    79,    219,   269,   271,   81,    84,    82,    43,    44,    56,    122,   124,   157,   123,   98,
		103,   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,   96,    97,    169,   158,   156,   155,   120,
		121,   125,   128,   95,    8191,  126,   127,   145,   146,   143,   144,   147,   8191,  148,   149,   150,   151,   8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  129,   71,    71,    71,    8191,  8191,  11,    8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  209,   135,   136,   138,   209,   208,   153,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  214,
		117,   119,   192,   130,   131,   99,    8191,  8191,  8191,  213,   8191,  281,   220,   220,   220,   220,   34,    34,    34,    8191,
		91,    57,    34,    8191,  8191,  34,    34,    34,    8191,  8191,  8191,  8191,  198,   226,   220,   141,   8191,  132,   133,   134,
		59,    8191,  8191,  196,   185,   8191,  2,     28,    28,    28,    8191,  239,   240,   241,   28,    28,    28,    173,   36,    73,
		28,    28,    73,    8191,  8191,  28,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  203,   8191,  224,   237,   188,   15,
		20,    21,    8191,  203,   222,   139,   140,   142,   161,   162,   163,   164,   165,   166,   167,   264,   8191,  260,   191,   8191,
		8191,  220,   8191,  8191,  280,   8191,  220,   137,   8191,  199,   244,   8191,  221,   220,   265,   8191,  8191,  8191,  60,    8191,
		8191,  8191,  8191,  200,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  55,    8191,  8191,  8191,
	];

	/** Map of non-terminals to a displacement into the self::Goto table. The corresponding goto state for this
	 *  non-terminal/state pair is self::Goto[self::GotoBase[$nonTerminal] + $state] (unless defaulted) */
	protected const GotoBase = [
		0,     0,     -1,    0,     0,     0,     107,   0,     237,   -238,  19,    -19,   0,     109,   45,    0,     0,     0,     0,     101,
		203,   53,    -22,   263,   -11,   42,    0,     44,    0,     50,    75,    0,     0,     -63,   -29,   23,    -8,    183,   0,     0,
		49,    0,     0,     48,    0,     0,     85,    0,     0,     0,     10,    0,     0,     0,     0,     -186,  -49,   0,     0,     9,
		30,    111,   41,    25,    -28,   0,     0,     -10,   -35,   0,     -44,   113,   112,   79,    0,     0,
	];

	/** Table of states to goto after reduction. Indexed according to self::GotoBase comment. */
	protected const Goto = [
		111,   111,   110,   111,   275,   276,   111,   318,   318,   318,   110,   638,   639,   640,   139,   127,   128,   127,   124,   124,
		116,   137,   129,   129,   129,   129,   124,   109,   126,   126,   126,   121,   305,   306,   255,   307,   308,   309,   310,   311,
		312,   313,   314,   457,   457,   122,   123,   112,   113,   114,   115,   117,   135,   136,   138,   156,   159,   160,   161,   162,
		165,   166,   167,   168,   169,   170,   171,   173,   174,   175,   176,   188,   204,   205,   206,   223,   224,   257,   258,   259,
		327,   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,   157,   118,   119,   129,
		130,   120,   158,   131,   132,   155,   133,   134,   181,   181,   181,   181,   387,   323,   181,   335,   353,   256,   181,   616,
		388,   397,   184,   186,   187,   186,   416,   416,   416,   416,   540,   540,   540,   416,   416,   416,   416,   416,   416,   416,
		542,   542,   542,   542,   542,   542,   542,   542,   542,   542,   542,   542,   542,   542,   330,   254,   333,   220,   221,   232,
		321,   326,   225,   233,   234,   235,   303,   303,   558,   558,   558,   558,   558,   558,   558,   558,   558,   272,   273,   603,
		604,   605,   227,   601,   601,   601,   580,   580,   580,   580,   580,   580,   580,   580,   580,   580,   580,   433,   239,   606,
		607,   613,   613,   613,   613,   613,   613,   578,   578,   578,   578,   578,   578,   578,   578,   578,   578,   578,   304,   304,
		304,   304,   304,   304,   304,   304,   304,   304,   304,   231,   322,   401,   339,   599,   599,   409,   231,   231,   302,   302,
		302,   302,   429,   507,   302,   231,   231,   648,   302,   438,   342,   218,   531,   350,   0,     406,   448,   447,   231,   0,
		0,     349,   395,   0,     315,   315,   530,   315,   0,     0,     315,   413,   420,   422,   424,   421,   423,   425,   0,     0,
		0,     334,   319,   320,   182,   182,   552,   534,   536,   632,   319,   320,   278,   538,   588,   590,   591,   442,   0,     0,
		0,     0,     351,   533,   0,     632,   633,   0,     0,     0,     0,     443,   0,     0,     0,     444,   0,     0,     633,   0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     390,   390,   390,   0,     0,     0,     390,   0,     0,     390,   390,   390,   0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     329,   0,     0,     0,     0,     0,     0,     0,     240,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		404,   404,
	];

	/** Table indexed analogously to self::Goto. If self::GotoCheck[self::GotoBase[$nonTerminal] + $state] != $nonTerminal
	 *  then the goto state is defaulted, i.e. self::GotoDefault[$nonTerminal] should be used. */
	protected const GotoCheck = [
		2,     2,     2,     2,     36,    36,    2,     55,    55,    55,    2,     9,     9,     9,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     6,     6,     6,     6,     13,    61,    6,     46,    46,    71,    6,     72,
		13,    19,    6,     6,     6,     6,     33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
		56,    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,    67,    22,    22,    22,    22,    22,
		22,    22,    22,    22,    22,    22,    24,    24,    24,    24,    24,    24,    24,    24,    24,    24,    24,    68,    68,    68,
		68,    68,    64,    67,    67,    67,    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,    37,    64,    70,
		70,    67,    67,    67,    67,    67,    67,    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,    62,    62,
		62,    62,    62,    62,    62,    62,    62,    62,    62,    10,    20,    21,    25,    67,    67,    27,    10,    10,    8,     8,
		8,     8,     29,    43,    8,     10,    10,    10,    8,     11,    11,    63,    50,    34,    -1,    11,    11,    11,    10,    -1,
		-1,    11,    11,    -1,    23,    23,    11,    23,    -1,    -1,    23,    30,    30,    30,    30,    30,    30,    30,    -1,    -1,
		-1,    23,    14,    14,    6,     6,     35,    35,    35,    73,    14,    14,    14,    35,    35,    35,    35,    40,    -1,    -1,
		-1,    -1,    10,    10,    -1,    73,    73,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    40,    -1,    -1,    73,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    6,     6,     6,     -1,    -1,    -1,    6,     -1,    -1,    6,     6,     6,     -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    8,     -1,    -1,    -1,    -1,    -1,    -1,    -1,    8,     -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
		23,    23,
	];

	/** Map of non-terminals to the default state to goto after their reduction */
	protected const GotoDefault = [
		-8192, 286,   125,   266,   358,   359,   185,   379,   328,   611,   597,   385,   267,   618,   284,   283,   456,   344,   281,   396,
		345,   400,   163,   293,   294,   337,   274,   408,   247,   427,   241,   260,   338,   264,   347,   449,   269,   432,   268,   248,
		441,   445,   455,   263,   523,   282,   331,   527,   352,   285,   532,   587,   265,   295,   270,   549,   252,   222,   296,   229,
		219,   316,   208,   217,   631,   230,   297,   585,   271,   593,   600,   317,   617,   630,   325,   341,
	];

	/** Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for
	 *  determining the state to goto after reduction. */
	protected const RuleToNonTerminal = [
		0,     1,     1,     1,     1,     6,     6,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
		7,     7,     8,     8,     8,     9,     9,     10,    11,    11,    4,     4,     12,    12,    14,    14,    15,    15,    16,    17,
		17,    18,    18,    19,    19,    5,     5,     21,    21,    21,    21,    25,    25,    26,    26,    27,    27,    29,    29,    29,
		29,    30,    30,    30,    30,    31,    31,    31,    31,    32,    32,    28,    28,    34,    34,    35,    35,    36,    36,    37,
		37,    37,    37,    20,    38,    38,    39,    39,    3,     3,     40,    41,    41,    41,    41,    2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     42,    45,    45,    48,    49,    49,    50,    51,
		51,    51,    51,    51,    51,    55,    33,    33,    56,    56,    56,    43,    43,    43,    53,    53,    47,    47,    59,    60,
		60,    24,    62,    62,    62,    62,    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,    46,    46,
		58,    58,    58,    58,    65,    65,    65,    52,    52,    52,    66,    66,    66,    66,    66,    66,    66,    22,    22,    22,
		22,    22,    67,    67,    70,    69,    57,    57,    57,    57,    57,    57,    57,    54,    54,    54,    68,    68,    68,    23,
		61,    71,    71,    72,    72,    72,    72,    13,    13,    13,    13,    13,    13,    13,    13,    63,    63,    63,    63,    64,
		74,    73,    73,    73,    73,    73,    73,    73,    73,    73,    75,    75,    75,    75,
	];

	/** Map of rules to the length of their right-hand side, which is the number of elements that have to
	 *  be popped from the stack(s) on reduction. */
	protected const RuleToLength = [
		1,     2,     2,     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
		1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     2,     0,     1,     3,     0,     1,     0,     1,     7,     0,
		2,     1,     3,     3,     4,     1,     3,     1,     2,     1,     1,     2,     0,     1,     3,     4,     6,     1,     2,     1,
		1,     1,     1,     1,     1,     3,     3,     3,     3,     3,     3,     0,     1,     0,     2,     2,     4,     1,     3,     1,
		2,     2,     3,     2,     3,     1,     2,     2,     1,     2,     3,     0,     3,     3,     1,     1,     3,     3,     3,     4,
		1,     1,     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
		3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
		2,     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,     4,     3,     3,     4,
		4,     2,     2,     2,     2,     2,     2,     2,     1,     8,     12,    9,     3,     0,     4,     2,     1,     3,     2,     2,
		4,     2,     4,     4,     6,     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,     1,     0,     1,     1,     3,
		5,     3,     4,     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,     2,     3,     0,     1,
		1,     3,     1,     1,     1,     1,     1,     1,     3,     1,     1,     4,     1,     4,     6,     4,     4,     1,     1,     3,
		3,     3,     1,     4,     1,     3,     1,     4,     3,     3,     3,     3,     3,     1,     3,     1,     1,     3,     1,     4,
		1,     3,     1,     1,     1,     3,     0,     1,     2,     3,     4,     3,     4,     2,     2,     2,     2,     1,     2,     1,
		1,     1,     4,     3,     3,     3,     3,     3,     6,     3,     1,     1,     2,     1,
	];

	/** Map of symbols to their names */
	protected const SymbolToName = [
		'end',
		'error',
		"','",
		"'or'",
		"'xor'",
		"'and'",
		"'=>'",
		"'='",
		"'+='",
		"'-='",
		"'*='",
		"'/='",
		"'.='",
		"'%='",
		"'&='",
		"'|='",
		"'^='",
		"'<<='",
		"'>>='",
		"'**='",
		"'??='",
		"'?'",
		"':'",
		"'??'",
		"'||'",
		"'&&'",
		"'|'",
		"'|'",
		"'^'",
		"'&'",
		"'&'",
		"'=='",
		"'!='",
		"'==='",
		"'!=='",
		"'<=>'",
		"'<'",
		"'<='",
		"'>'",
		"'>='",
		"'.'",
		"'<<'",
		"'>>'",
		"'in'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'instanceof'",
		"'~'",
		"'++'",
		"'--'",
		"'(int)'",
		"'(float'",
		"'(string)'",
		"'(array)'",
		"'(object)'",
		"'(bool)'",
		"'@'",
		"'**'",
		"'['",
		"'new'",
		"'clone'",
		'integer',
		'floating-point number',
		'identifier',
		'variable name',
		'constant',
		'variable',
		'number',
		'string content',
		'quoted string',
		"'match'",
		"'default'",
		"'function'",
		"'fn'",
		"'return'",
		"'use'",
		"'isset'",
		"'empty'",
		"'->'",
		"'?->'",
		"'??->'",
		"'list'",
		"'array'",
		"'heredoc start'",
		"'heredoc end'",
		"'\${'",
		"'{\$'",
		"'::'",
		"'...'",
		"'(expand)'",
		'fully qualified name',
		'namespaced name',
		"'null'",
		"'true'",
		"'false'",
		"'e'",
		"'m'",
		"'a'",
		"'f'",
		"'('",
		"')'",
		"'{'",
		"'}'",
		"';'",
		"']'",
		"'\"'",
		"'$'",
		"'\\\\'",
		'whitespace',
		'comment',
	];

	/** Temporary value containing the result of last semantic action (reduction) */
	protected mixed $semValue = null;

	/** Semantic value stack (contains values of tokens and semantic action results) */
	protected array $semStack;

	/** @var Token[] Start attribute stack */
	protected array $startTokenStack;


	protected function reduce(int $rule, int $pos): void
	{
		(match ($rule) {
			0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 57, 72, 74, 94, 95, 100, 101, 168, 185, 187, 191, 192, 194, 195, 197, 208, 213, 214, 219, 220, 222, 223, 224, 225, 227, 229, 230, 232, 237, 238, 242, 246, 253, 255, 256, 258, 263, 281, 293 => fn() => $this->semValue = $this->semStack[$pos],
			2 => fn() => $this->semValue = new Node\ModifierNode($this->semStack[$pos], position: $this->startTokenStack[$pos]->position),
			3 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos], position: $this->startTokenStack[$pos]->position),
			22, 23, 24, 25, 26, 62, 63, 64 => fn() => $this->semValue = new Node\IdentifierNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			27 => fn() => $this->semValue = new Expression\VariableNode(substr($this->semStack[$pos], 1), $this->startTokenStack[$pos]->position),
			30, 40, 51, 83, 92, 93, 153, 154, 174, 175, 193, 221, 228, 254, 257, 289 => fn() => $this->semValue = $this->semStack[$pos - 1],
			31, 39, 52, 75, 91, 173, 196 => fn() => $this->semValue = [],
			32, 41, 53, 77, 85, 88, 176, 262, 277 => fn() => $this->semValue = [$this->semStack[$pos]],
			33, 42, 54, 66, 68, 70, 78, 84, 177, 261 => function () use ($pos) {
				$this->semStack[$pos - 2][] = $this->semStack[$pos];
				$this->semValue = $this->semStack[$pos - 2];
			},
			34, 36 => fn() => $this->semValue = false,
			35, 37 => fn() => $this->semValue = true,
			38 => fn() => $this->semValue = new Expression\MatchNode($this->semStack[$pos - 4], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 6]->position),
			43 => fn() => $this->semValue = new Node\MatchArmNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			44 => fn() => $this->semValue = new Node\MatchArmNode(null, $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			45 => fn() => $this->semValue = [null, ...$this->semStack[$pos]],
			46 => fn() => $this->semValue = [$this->semStack[$pos - 2], ...$this->semStack[$pos]],
			47, 49 => fn() => $this->semValue = [$this->semStack[$pos], false],
			48 => fn() => $this->semValue = [$this->semStack[$pos], true],
			50 => fn() => $this->semValue = [$this->convertArrayToList($this->semStack[$pos]), false],
			55 => fn() => $this->semValue = new Node\ParameterNode($this->semStack[$pos], null, $this->semStack[$pos - 3], $this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			56 => fn() => $this->semValue = new Node\ParameterNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->semStack[$pos - 5], $this->semStack[$pos - 4], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			58 => fn() => $this->semValue = new Node\NullableTypeNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			59 => fn() => $this->semValue = new Node\UnionTypeNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			60 => fn() => $this->semValue = new Node\IntersectionTypeNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			61 => fn() => $this->semValue = TagParser::handleBuiltinTypes($this->semStack[$pos]),
			65, 67, 69 => fn() => $this->semValue = [$this->semStack[$pos - 2], $this->semStack[$pos]],
			71, 73, 218 => fn() => $this->semValue = null,
			76 => fn() => $this->semValue = $this->semStack[$pos - 2],
			79 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, false, null, $this->startTokenStack[$pos]->position),
			80 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], true, false, null, $this->startTokenStack[$pos - 1]->position),
			81 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, true, null, $this->startTokenStack[$pos - 1]->position),
			82 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, false, $this->semStack[$pos - 2], $this->startTokenStack[$pos - 2]->position),
			86, 87 => fn() => $this->semValue = new Expression\FilterCallNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			89, 275, 276 => function () use ($pos) {
				$this->semStack[$pos - 1][] = $this->semStack[$pos];
				$this->semValue = $this->semStack[$pos - 1];
			},
			90 => fn() => $this->semValue = new Node\FilterNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			96, 98 => fn() => $this->semValue = new Expression\AssignNode($this->semStack[$pos - 2], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			97 => fn() => $this->semValue = new Expression\AssignNode($this->convertArrayToList($this->semStack[$pos - 2]), $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			99 => fn() => $this->semValue = new Expression\AssignNode($this->semStack[$pos - 3], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			102 => fn() => $this->semValue = new Expression\CloneNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			103 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '+', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			104 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '-', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			105 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '*', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			106 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '/', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			107 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '.', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			108 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '%', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			109 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			110 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '|', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			111 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '^', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			112 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '<<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			113 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '>>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			114 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '**', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			115 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '??', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			116 => fn() => $this->semValue = new Expression\PostOpNode($this->semStack[$pos - 1], '++', $this->startTokenStack[$pos - 1]->position),
			117 => fn() => $this->semValue = new Expression\PreOpNode($this->semStack[$pos], '++', $this->startTokenStack[$pos - 1]->position),
			118 => fn() => $this->semValue = new Expression\PostOpNode($this->semStack[$pos - 1], '--', $this->startTokenStack[$pos - 1]->position),
			119 => fn() => $this->semValue = new Expression\PreOpNode($this->semStack[$pos], '--', $this->startTokenStack[$pos - 1]->position),
			120 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '||', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			121 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '&&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			122 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'or', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			123 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'and', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			124 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'xor', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			125 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '|', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			126, 127 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			128 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '^', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			129 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '.', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			130 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '+', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			131 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '-', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			132 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '*', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			133 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '/', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			134 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '%', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			135 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			136 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			137 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '**', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			138 => fn() => $this->semValue = new Expression\InNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			139 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '+', $this->startTokenStack[$pos - 1]->position),
			140 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '-', $this->startTokenStack[$pos - 1]->position),
			141 => fn() => $this->semValue = new Expression\NotNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			142 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '~', $this->startTokenStack[$pos - 1]->position),
			143 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '===', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			144 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '!==', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			145 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '==', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			146 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '!=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			147 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<=>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			148 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			149 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			150 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			151 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			152 => fn() => $this->semValue = new Expression\InstanceofNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			155 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 4], $this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 4]->position),
			156 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 3], null, $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			157 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 2], $this->semStack[$pos], null, $this->startTokenStack[$pos - 2]->position),
			158 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '??', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			159 => fn() => $this->semValue = new Expression\IssetNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			160 => fn() => $this->semValue = new Expression\EmptyNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			161 => fn() => $this->semValue = new Expression\CastNode('int', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			162 => fn() => $this->semValue = new Expression\CastNode('float', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			163 => fn() => $this->semValue = new Expression\CastNode('string', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			164 => fn() => $this->semValue = new Expression\CastNode('array', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			165 => fn() => $this->semValue = new Expression\CastNode('object', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			166 => fn() => $this->semValue = new Expression\CastNode('bool', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			167 => fn() => $this->semValue = new Expression\ErrorSuppressNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			169 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 6], $this->semStack[$pos - 4], [], $this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 7]->position),
			170 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 10], $this->semStack[$pos - 8], $this->semStack[$pos - 6], $this->semStack[$pos - 5], $this->semStack[$pos - 2], $this->startTokenStack[$pos - 11]->position),
			171 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 7], $this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->semStack[$pos - 2], null, $this->startTokenStack[$pos - 8]->position),
			172 => fn() => $this->semValue = new Expression\NewNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			178 => fn() => $this->semValue = new Node\ClosureUseNode($this->semStack[$pos], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 1]->position),
			179, 181 => fn() => $this->semValue = $this->checkFunctionName(new Expression\FunctionCallNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position)),
			180, 182 => fn() => $this->semValue = $this->checkFunctionName(new Expression\FunctionCallableNode($this->semStack[$pos - 3], $this->startTokenStack[$pos - 3]->position)),
			183 => fn() => $this->semValue = new Expression\StaticMethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			184 => fn() => $this->semValue = new Expression\StaticMethodCallableNode($this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			186, 188, 189 => fn() => $this->semValue = new Node\NameNode($this->semStack[$pos], Node\NameNode::KindNormal, $this->startTokenStack[$pos]->position),
			190 => fn() => $this->semValue = new Node\NameNode($this->semStack[$pos], Node\NameNode::KindFullyQualified, $this->startTokenStack[$pos]->position),
			198 => fn() => $this->semValue = new Expression\ConstantFetchNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			199 => fn() => $this->semValue = new Expression\ClassConstantFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			200 => fn() => $this->semValue = new Expression\ClassConstantFetchNode($this->semStack[$pos - 4], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 4]->position),
			201 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			202 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			203 => function () use ($pos) {
				$this->semValue = $this->semStack[$pos];
				$this->shortArrays->attach($this->semValue);
			},
			204 => fn() => $this->semValue = Scalar\StringNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			205 => fn() => $this->semValue = Scalar\InterpolatedStringNode::parse($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			206 => fn() => $this->semValue = Scalar\IntegerNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			207 => fn() => $this->semValue = Scalar\FloatNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			209, 290 => fn() => $this->semValue = new Scalar\StringNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			210 => fn() => $this->semValue = new Scalar\BooleanNode(true, $this->startTokenStack[$pos]->position),
			211 => fn() => $this->semValue = new Scalar\BooleanNode(false, $this->startTokenStack[$pos]->position),
			212 => fn() => $this->semValue = new Scalar\NullNode($this->startTokenStack[$pos]->position),
			215 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 2], [$this->semStack[$pos - 1]], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position, $this->startTokenStack[$pos]->position),
			216 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 1], [], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position, $this->startTokenStack[$pos]->position),
			217 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position, $this->startTokenStack[$pos]->position),
			226 => fn() => $this->semValue = new Expression\ConstantFetchNode(new Node\NameNode($this->semStack[$pos], Node\NameNode::KindNormal, $this->startTokenStack[$pos]->position), $this->startTokenStack[$pos]->position),
			231, 247, 282 => fn() => $this->semValue = new Expression\ArrayAccessNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			233 => fn() => $this->semValue = new Expression\MethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], false, $this->startTokenStack[$pos - 3]->position),
			234 => fn() => $this->semValue = new Expression\MethodCallableNode($this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			235 => fn() => $this->semValue = new Expression\MethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			236 => fn() => $this->semValue = new Expression\MethodCallNode(new Expression\BinaryOpNode($this->semStack[$pos - 3], '??', new Scalar\NullNode($this->startTokenStack[$pos - 3]->position), $this->startTokenStack[$pos - 3]->position), $this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			239, 248, 283 => fn() => $this->semValue = new Expression\PropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			240, 249, 284 => fn() => $this->semValue = new Expression\PropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			241, 250, 285 => fn() => $this->semValue = new Expression\PropertyFetchNode(new Expression\BinaryOpNode($this->semStack[$pos - 2], '??', new Scalar\NullNode($this->startTokenStack[$pos - 2]->position), $this->startTokenStack[$pos - 2]->position), $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			243 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			244 => function () use ($pos) {
				$var = $this->semStack[$pos]->name;
				$this->semValue = is_string($var)
					? new Node\VarLikeIdentifierNode($var, $this->startTokenStack[$pos]->position)
					: $var;
			},
			245, 251, 252 => fn() => $this->semValue = new Expression\StaticPropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			259 => fn() => $this->semValue = $this->convertArrayToList(new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position)),
			260 => function () use ($pos) {
				$this->semValue = $this->semStack[$pos];
				$end = count($this->semValue) - 1;
				if (
					$this->semValue[$end]->value instanceof Expression\TemporaryNode
					&& !$this->semValue[$end]->value->value
				) {
					array_pop($this->semValue);
				}
			},
			264 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode($this->semStack[$pos], $this->startTokenStack[$pos]->position), null, false, false, $this->startTokenStack[$pos]->position),
			265 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode($this->semStack[$pos], $this->startTokenStack[$pos - 2]->position), $this->semStack[$pos - 2], false, false, $this->startTokenStack[$pos - 2]->position),
			266 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode(null), null, false, false, $this->startTokenStack[$pos]->position),
			267 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, false, false, $this->startTokenStack[$pos]->position),
			268 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, true, false, $this->startTokenStack[$pos - 1]->position),
			269, 271 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], $this->semStack[$pos - 2], false, false, $this->startTokenStack[$pos - 2]->position),
			270, 272 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], $this->semStack[$pos - 3], true, false, $this->startTokenStack[$pos - 3]->position),
			273, 274 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, false, true, $this->startTokenStack[$pos - 1]->position),
			278 => fn() => $this->semValue = [$this->semStack[$pos - 1], $this->semStack[$pos]],
			279 => fn() => $this->semValue = new Node\InterpolatedStringPartNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			280 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			286, 287 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			288 => fn() => $this->semValue = new Expression\ArrayAccessNode($this->semStack[$pos - 4], $this->semStack[$pos - 2], $this->startTokenStack[$pos - 5]->position),
			291 => fn() => $this->semValue = TagParser::parseOffset($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			292 => fn() => $this->semValue = TagParser::parseOffset('-' . $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
		})();
	}
}
