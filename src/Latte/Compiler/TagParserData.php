<?php

/**
 * This file is part of the Latte (https://latte.nette.org)
 * Copyright (c) 2008 David Grudl (https://davidgrudl.com)
 */

declare(strict_types=1);

namespace Latte\Compiler;

use Latte\Compiler\Nodes\Php as Node;
use Latte\Compiler\Nodes\Php\Expression;
use Latte\Compiler\Nodes\Php\Scalar;
use function array_pop, count, is_string, substr;


/** @internal generated trait used by TagParser */
abstract class TagParserData
{
	/** Symbol number of error recovery token */
	protected const ErrorSymbol = 1;

	/** Action number signifying default action */
	protected const DefaultAction = -8190;

	/** Rule number signifying that an unexpected token was encountered */
	protected const UnexpectedTokenRule = 8191;

	protected const Yy2Tblstate = 262;

	/** Number of non-leaf states */
	protected const NumNonLeafStates = 359;

	/** Map of lexer tokens to internal symbols */
	protected const TokenToSymbol = [
		0,     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   49,    109,   114,   110,   48,    114,   114,
		103,   104,   46,    44,    2,     45,    40,    47,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   22,    107,
		36,    7,     38,    21,    60,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   62,    114,   108,   28,    114,   114,   101,   114,   114,
		114,   99,    102,   114,   114,   114,   114,   114,   114,   100,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   105,   26,    106,   51,    114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
		114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,   1,     3,     4,     5,
		6,     8,     9,     10,    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,    23,    24,    25,    27,    29,    30,
		31,    32,    33,    34,    35,    37,    39,    41,    42,    43,    50,    52,    53,    54,    55,    56,    57,    58,    59,    61,
		63,    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
		83,    84,    85,    86,    87,    88,    89,    90,    91,    111,   92,    93,    94,    95,    112,   113,   96,    97,    98,
	];

	/** Map of states to a displacement into the self::Action table. The corresponding action for this
	 *  state/symbol pair is self::Action[self::ActionBase[$state] + $symbol]. If self::ActionBase[$state] is 0, the
	 *  action is defaulted, i.e. self::ActionDefault[$state] should be used instead. */
	protected const ActionBase = [
		338,   318,   318,   318,   318,   100,   122,   318,   275,   179,   232,   318,   399,   399,   399,   222,   222,   222,   222,   314,
		314,   305,   319,   441,   442,   443,   445,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -3,    243,   271,   453,   455,   454,   457,   477,   482,   476,   483,
		491,   52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    155,   104,   354,   157,   157,
		157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,   260,   260,   260,   311,
		269,   207,   263,   405,   -31,   111,   111,   507,   507,   507,   507,   507,   440,   493,   493,   81,    81,    81,    81,    481,
		481,   481,   481,   481,   481,   481,   481,   481,   164,   123,   123,   279,   13,    259,   259,   259,   259,   70,    70,    70,
		70,    70,    70,    70,    281,   109,   109,   109,   368,   402,   490,   503,   339,   321,   321,   321,   321,   321,   321,   346,
		393,   -22,   133,   133,   156,   225,   225,   133,   436,   40,    231,   -35,   324,   371,   328,   146,   223,   2,     446,   298,
		304,   329,   36,    41,    222,   488,   488,   222,   222,   222,   449,   80,    80,    80,    42,    194,   187,   290,   458,   290,
		290,   290,   218,   -75,   306,   369,   378,   306,   62,    379,   379,   140,   129,   389,   391,   379,   379,   169,   129,   129,
		301,   313,   348,   188,   136,   348,   308,   308,   186,   35,    394,   392,   395,   367,   366,   463,   206,   310,   350,   300,
		362,   172,   394,   392,   395,   315,   6,     353,   357,   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,   206,
		462,   43,    355,   396,   397,   17,    420,   423,   465,   309,   469,   299,   344,   345,   297,   484,   358,   28,    206,   487,
		459,   343,   317,   409,   303,   489,   425,   332,   470,   214,   398,   228,   471,   235,   464,   312,   430,   302,   474,   0,
		-44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,   -44,
		-44,   -44,   -44,   -44,   -44,   -44,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     52,    52,    52,    52,    52,    52,
		52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
		52,    52,    0,     440,   52,    52,    52,    52,    52,    52,    52,    0,     -23,   -23,   109,   109,   109,   109,   -23,   -23,
		-23,   -23,   -23,   -23,   -23,   -23,   -23,   109,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,   -23,
		-23,   -23,   -23,   0,     0,     0,     0,     0,     0,     0,     0,     436,   308,   308,   308,   308,   308,   308,   436,   436,
		0,     0,     0,     0,     109,   109,   0,     0,     436,   308,   0,     0,     0,     0,     0,     0,     0,     222,   222,   222,
		436,   379,   0,     0,     308,   308,   0,     0,     0,     306,   0,     0,     0,     0,     0,     0,     299,   43,    299,   299,
		299,
	];

	/** Table of actions. Indexed according to self::ActionBase comment. */
	protected const Action = [
		33,    34,    -277,  31,    -277,  35,    -50,   36,    179,   180,   37,    38,    39,    40,    41,    42,    43,    -48,   1,     193,
		44,    568,   569,   208,   172,   550,   386,   -229,  -47,   566,   290,   530,   247,   248,   197,   0,     291,   292,   12,    386,
		-226,  293,   294,   212,   548,   7,     550,   -229,  -229,  -229,  552,   551,   574,   572,   573,   53,    54,    55,    13,    28,
		-226,  -226,  -226,  421,   11,    228,   295,   198,   199,   -226,  200,   552,   551,   22,    98,    56,    57,    58,    59,    295,
		60,    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
		80,    211,   196,   367,   368,   366,   -277,  -8190, -8190, 423,   -277,  422,   -8190, 81,    -8190, -8190, -8190, -8191, -8191, -8191,
		-8191, 72,    73,    74,    75,    367,   368,   366,   577,   365,   364,   14,    -8190, -190,  -8190, -8190, -8190, -8190, 20,    -8190,
		-8190, -8190, 101,   377,   197,   -190,  -80,   384,   -80,   385,   371,   365,   364,   76,    77,    78,    79,    80,    -8190, 196,
		-8190, -8190, -8190, 194,   45,    377,   423,   204,   422,   301,   81,    191,   371,   -80,   302,   373,   239,   240,   372,   378,
		303,   304,   367,   368,   366,   194,   45,    -47,   238,   204,   388,   301,   23,    174,   -23,   -223,  302,   373,   239,   240,
		372,   378,   303,   304,   434,   73,    74,    75,    365,   364,   -8190, -8190, -8190, 95,    24,    -223,  -223,  -223,  30,    423,
		105,   422,   377,   -275,  -223,  -275,  434,   -52,   -8190, 371,   -8190, -8190, -8190, -8190, 106,   367,   368,   366,   216,   217,
		218,   107,   194,   45,    201,   202,   204,   246,   301,   16,    -80,   365,   364,   302,   373,   239,   240,   372,   378,   303,
		304,   365,   364,   -8190, -8190, -8190, -8190, -8190, -8190, -8190, -8190, 25,    -8190, -8190, -8190, 377,   344,   18,    367,   368,
		366,   -8190, 371,   434,   -8190, -189,  -8190, -8190, -8190, -8190, -8190, -8190, -8190, -8190, -8190, 194,   45,    -189,  654,   204,
		197,   301,   655,   -22,   365,   364,   302,   373,   239,   240,   372,   378,   303,   304,   -8190, -8190, -8190, 96,    377,   108,
		-17,   367,   368,   366,   26,    371,   -16,   -275,  -273,  386,   -273,  -275,  -8190, 172,   -8190, -8190, 434,   17,    194,   45,
		196,   97,    204,   -230,  301,   -8190, 203,   365,   364,   302,   373,   239,   240,   372,   378,   303,   304,   -8190, -8190, -8190,
		81,    377,   49,    -230,  -230,  -230,  104,   100,   371,   295,   192,   102,   -189,  328,   656,   423,   103,   422,   386,   434,
		350,   194,   45,    -29,   -189,  204,   29,    301,   384,   283,   385,   -198,  302,   373,   239,   240,   372,   378,   303,   304,
		-260,  -8190, 367,   368,   366,   396,   213,   214,   215,   358,   46,    47,    15,    82,    83,    84,    85,    86,    87,    88,
		89,    90,    91,    92,    93,    94,    99,    578,   365,   364,   -230,  295,   -273,  230,   579,   -259,  -273,  32,    264,   3,
		173,   164,   377,   367,   368,   366,   245,   280,   -258,  371,   -230,  -230,  -230,  251,   252,   253,   -234,  475,   477,   -189,
		-233,  -232,  194,   45,    -227,  -231,  204,   -223,  301,   2,     4,     -189,  5,     302,   373,   239,   240,   372,   378,   303,
		304,   6,     8,     377,   -227,  -227,  -227,  -223,  -223,  -223,  371,   100,   9,     -227,  10,    27,    -223,  50,    51,    189,
		190,   244,   567,   370,   369,   -234,  386,   381,   643,   382,   -8190, -8190, -8190, 282,   374,   373,   376,   375,   372,   378,
		379,   380,   365,   364,   518,   21,    183,   564,   -8190, 435,   -8190, -8190, -8190, -8190, 536,   -8190, -8190, -8190, -8191, -8191,
		-8191, -8191, -8191, 1,     195,   542,   544,   546,   255,   598,   -29,   386,   -225,  513,   566,   1,     195,   336,   340,   555,
		255,   519,   623,   386,   19,    -224,  566,   294,   52,    263,   563,   651,   -225,  -225,  -225,  653,   397,   652,   293,   294,
		529,   -225,  347,   650,   48,    -224,  -224,  -224,  607,   621,   228,   295,   595,   -233,  -224,  611,   48,    646,   295,   352,
		0,     0,     228,   295,   0,     0,     -232,
	];

	/** Table indexed analogously to self::Action. If self::ActionCheck[self::ActionBase[$state] + $symbol] != $symbol
	 *  then the action is defaulted, i.e. self::ActionDefault[$state] should be used instead. */
	protected const ActionCheck = [
		44,    45,    0,     78,    2,     49,    0,     51,    52,    53,    54,    55,    56,    57,    58,    59,    60,    0,     62,    63,
		64,    65,    66,    67,    27,    69,    70,    62,    0,     73,    74,    106,   76,    77,    21,    0,     80,    81,    2,     70,
		62,    85,    86,    87,    67,    2,     69,    82,    83,    84,    94,    95,    96,    97,    98,    3,     4,     5,     22,    103,
		82,    83,    84,    86,    2,     109,   110,   26,    27,    91,    29,    94,    95,    21,    105,   23,    24,    25,    26,    110,
		28,    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
		48,    104,   50,    3,     4,     5,     104,   3,     4,     96,    108,   98,    72,    61,    3,     4,     5,     36,    37,    38,
		39,    40,    41,    42,    43,    3,     4,     5,     88,    29,    30,    2,     21,    91,    23,    24,    25,    26,    2,     28,
		29,    30,    2,     43,    21,    103,   0,     67,    2,     69,    50,    29,    30,    44,    45,    46,    47,    48,    3,     50,
		3,     4,     5,     63,    64,    43,    96,    67,    98,    69,    61,    2,     50,    27,    74,    75,    76,    77,    78,    79,
		80,    81,    3,     4,     5,     63,    64,    0,     2,     67,    2,     69,    92,    6,     22,    62,    74,    75,    76,    77,
		78,    79,    80,    81,    104,   41,    42,    43,    29,    30,    3,     4,     5,     7,     92,    82,    83,    84,    62,    96,
		6,     98,    43,    0,     91,    2,     104,   104,   21,    50,    23,    24,    25,    26,    6,     3,     4,     5,     82,    83,
		84,    6,     63,    64,    26,    27,    67,    91,    69,    6,     104,   29,    30,    74,    75,    76,    77,    78,    79,    80,
		81,    29,    30,    3,     4,     5,     3,     4,     5,     44,    45,    92,    3,     4,     5,     43,    45,    6,     3,     4,
		5,     21,    50,    104,   21,    91,    23,    24,    25,    26,    21,    28,    23,    24,    25,    63,    64,    103,   67,    67,
		21,    69,    71,    22,    29,    30,    74,    75,    76,    77,    78,    79,    80,    81,    3,     4,     5,     7,     43,    7,
		22,    3,     4,     5,     92,    50,    22,    104,   0,     70,    2,     108,   21,    27,    23,    24,    104,   22,    63,    64,
		50,    22,    67,    62,    69,    86,    29,    29,    30,    74,    75,    76,    77,    78,    79,    80,    81,    3,     4,     5,
		61,    43,    103,   82,    83,    84,    22,    92,    50,    110,   22,    62,    91,    68,    71,    96,    22,    98,    70,    104,
		79,    63,    64,    104,   103,   67,    62,    69,    67,    75,    69,    91,    74,    75,    76,    77,    78,    79,    80,    81,
		103,   72,    3,     4,     5,     92,    82,    83,    84,    107,   92,    93,    7,     8,     9,     10,    11,    12,    13,    14,
		15,    16,    17,    18,    19,    20,    105,   88,    29,    30,    62,    110,   104,   62,    88,    103,   108,   99,    100,   101,
		102,   91,    43,    3,     4,     5,     91,    104,   103,   50,    82,    83,    84,    82,    83,    84,    103,   52,    53,    91,
		103,   103,   63,    64,    62,    103,   67,    62,    69,    103,   103,   103,   103,   74,    75,    76,    77,    78,    79,    80,
		81,    103,   103,   43,    82,    83,    84,    82,    83,    84,    50,    92,    103,   91,    103,   103,   91,    103,   103,   103,
		103,   103,   109,   63,    64,    103,   70,    67,    72,    69,    3,     4,     5,     104,   74,    75,    76,    77,    78,    79,
		80,    81,    29,    30,    104,   89,    90,    104,   21,    104,   23,    24,    25,    26,    104,   28,    29,    30,    31,    32,
		33,    34,    35,    62,    63,    104,   104,   104,   67,    104,   104,   70,    62,    104,   73,    62,    63,    104,   104,   104,
		67,    104,   104,   70,    105,   62,    73,    86,    105,   105,   108,   106,   82,    83,    84,    106,   106,   106,   85,    86,
		106,   91,    106,   106,   103,   82,    83,    84,    106,   106,   109,   110,   108,   103,   91,    108,   103,   108,   110,   108,
		-1,    -1,    109,   110,   -1,    -1,    103,
	];

	/** Map of states to their default action */
	protected const ActionDefault = [
		8191,  271,   271,   31,    271,   8191,  8191,  271,   8191,  8191,  8191,  29,    8191,  8191,  29,    8191,  8191,  8191,  8191,  39,
		29,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  221,   221,   221,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  10,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  29,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  272,   272,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  1,     278,   279,   85,    79,    222,   274,   276,   81,    84,    82,    43,    44,    56,    122,   124,   157,   123,   98,
		103,   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,   96,    97,    169,   158,   156,   155,   120,
		121,   125,   128,   95,    8191,  126,   127,   145,   146,   143,   144,   147,   8191,  8191,  8191,  148,   149,   150,   151,   8191,
		8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  129,   71,    71,    71,    8191,  8191,  11,    8191,  8191,  8191,  8191,  8191,
		8191,  8191,  8191,  8191,  212,   135,   136,   138,   212,   174,   211,   153,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,
		8191,  217,   117,   119,   195,   130,   131,   99,    8191,  8191,  8191,  216,   8191,  286,   223,   223,   223,   223,   34,    34,
		34,    8191,  91,    57,    34,    8191,  8191,  34,    34,    34,    8191,  8191,  8191,  8191,  201,   230,   223,   141,   8191,  132,
		133,   134,   59,    8191,  8191,  188,   8191,  2,     28,    173,   8191,  28,    28,    8191,  244,   245,   246,   28,    28,    28,
		176,   36,    73,    28,    28,    73,    8191,  8191,  28,    8191,  8191,  8191,  8191,  8191,  8191,  8191,  8191,  206,   8191,  228,
		242,   191,   15,    20,    21,    8191,  206,   227,   225,   139,   140,   142,   161,   162,   163,   164,   165,   166,   167,   269,
		8191,  265,   194,   8191,  8191,  223,   8191,  8191,  285,   8191,  223,   137,   8191,  202,   249,   8191,  224,   223,   270,   8191,
		8191,  8191,  60,    8191,  8191,  8191,  8191,  203,   8191,  8191,  8191,  8191,  8191,  8191,  8191,  55,    8191,  8191,  8191,
	];

	/** Map of non-terminals to a displacement into the self::Goto table. The corresponding goto state for this
	 *  non-terminal/state pair is self::Goto[self::GotoBase[$nonTerminal] + $state] (unless defaulted) */
	protected const GotoBase = [
		0,     0,     -1,    0,     0,     0,     107,   0,     171,   -244,  66,    20,    0,     1,     62,    0,     0,     0,     0,     97,
		94,    28,    -16,   197,   10,    -10,   0,     12,    0,     -11,   29,    0,     0,     -63,   -50,   40,    100,   165,   0,     0,
		72,    0,     0,     -76,   0,     0,     85,    38,    0,     0,     0,     -30,   0,     0,     0,     0,     -34,   -48,   0,     0,
		0,     60,    75,    3,     90,    -15,   -12,   0,     0,     -8,    103,   0,     -69,   7,     6,     24,    0,     0,
	];

	/** Table of states to goto after reduction. Indexed according to self::GotoBase comment. */
	protected const Goto = [
		111,   111,   110,   111,   391,   327,   111,   647,   648,   649,   110,   258,   392,   625,   139,   127,   128,   127,   124,   124,
		116,   137,   129,   129,   129,   129,   124,   109,   126,   126,   126,   121,   309,   310,   257,   311,   312,   313,   314,   315,
		316,   317,   318,   461,   461,   122,   123,   112,   113,   114,   115,   117,   135,   136,   138,   156,   159,   160,   161,   162,
		165,   166,   167,   168,   169,   170,   171,   175,   176,   177,   178,   188,   205,   206,   207,   225,   226,   259,   260,   261,
		331,   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,   157,   118,   119,   129,
		130,   120,   158,   131,   132,   155,   133,   134,   181,   181,   181,   181,   278,   279,   181,   339,   357,   401,   181,   270,
		511,   326,   184,   186,   187,   186,   420,   420,   420,   420,   547,   547,   547,   547,   420,   420,   420,   420,   420,   420,
		420,   549,   549,   549,   549,   549,   549,   549,   549,   549,   549,   549,   549,   549,   549,   549,   334,   256,   337,   322,
		322,   322,   322,   222,   223,   234,   325,   330,   227,   235,   236,   237,   305,   305,   305,   305,   615,   616,   305,   437,
		343,   433,   305,   306,   306,   610,   610,   610,   610,   565,   565,   565,   565,   565,   565,   565,   565,   565,   319,   319,
		229,   319,   405,   413,   319,   622,   622,   622,   622,   622,   622,   307,   307,   220,   538,   338,   241,   307,   307,   307,
		307,   307,   307,   307,   307,   307,   417,   424,   426,   428,   425,   427,   429,   588,   588,   354,   641,   608,   608,   588,
		588,   588,   588,   588,   588,   588,   588,   588,   585,   585,   0,     0,     641,   642,   585,   585,   585,   585,   585,   585,
		585,   585,   585,   308,   308,   642,   0,     0,     0,     308,   308,   308,   308,   308,   308,   308,   308,   308,   233,   0,
		182,   182,   453,   0,     0,     233,   233,   0,     0,     0,     0,     442,   346,   0,     233,   233,   657,   410,   452,   451,
		0,     323,   324,   353,   399,   541,   543,   233,   537,   323,   324,   281,   0,     545,   597,   599,   600,   275,   276,   612,
		613,   614,   446,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     333,   447,   0,     0,     448,
		0,     0,     0,     242,   0,     394,   394,   394,   0,     0,     0,     394,   355,   540,   394,   394,   394,   0,     0,     0,
		0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     408,   408,
	];

	/** Table indexed analogously to self::Goto. If self::GotoCheck[self::GotoBase[$nonTerminal] + $state] != $nonTerminal
	 *  then the goto state is defaulted, i.e. self::GotoDefault[$nonTerminal] should be used. */
	protected const GotoCheck = [
		2,     2,     2,     2,     13,    63,    2,     9,     9,     9,     2,     73,    13,    74,    2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     6,     6,     6,     6,     36,    36,    6,     46,    46,    19,    6,     43,
		43,    20,    6,     6,     6,     6,     33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
		33,    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,    69,    22,    22,    56,
		56,    56,    56,    22,    22,    22,    22,    22,    22,    22,    22,    22,    8,     8,     8,     8,     72,    72,    8,     37,
		25,    29,    8,     24,    24,    69,    69,    69,    69,    24,    24,    24,    24,    24,    24,    24,    24,    24,    23,    23,
		66,    23,    21,    27,    23,    69,    69,    69,    69,    69,    69,    47,    47,    65,    51,    23,    66,    47,    47,    47,
		47,    47,    47,    47,    47,    47,    30,    30,    30,    30,    30,    30,    30,    61,    61,    34,    75,    69,    69,    61,
		61,    61,    61,    61,    61,    61,    61,    61,    62,    62,    -1,    -1,    75,    75,    62,    62,    62,    62,    62,    62,
		62,    62,    62,    64,    64,    75,    -1,    -1,    -1,    64,    64,    64,    64,    64,    64,    64,    64,    64,    10,    -1,
		6,     6,     35,    -1,    -1,    10,    10,    -1,    -1,    -1,    -1,    11,    11,    -1,    10,    10,    10,    11,    11,    11,
		-1,    14,    14,    11,    11,    35,    35,    10,    11,    14,    14,    14,    -1,    35,    35,    35,    35,    70,    70,    70,
		70,    70,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    8,     40,    -1,    -1,    40,
		-1,    -1,    -1,    8,     -1,    6,     6,     6,     -1,    -1,    -1,    6,     10,    10,    6,     6,     6,     -1,    -1,    -1,
		-1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    23,
	];

	/** Map of non-terminals to the default state to goto after their reduction */
	protected const GotoDefault = [
		-8192, 289,   125,   267,   362,   363,   185,   383,   332,   620,   606,   389,   268,   627,   287,   286,   460,   348,   284,   400,
		349,   404,   163,   296,   297,   341,   277,   412,   249,   431,   243,   262,   342,   265,   351,   531,   272,   436,   271,   250,
		445,   449,   459,   269,   527,   285,   335,   209,   534,   356,   288,   539,   596,   266,   298,   273,   556,   254,   224,   299,
		-8192, 231,   221,   320,   210,   219,   640,   232,   300,   594,   274,   602,   609,   321,   626,   639,   329,   345,
	];

	/** Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for
	 *  determining the state to goto after reduction. */
	protected const RuleToNonTerminal = [
		0,     1,     1,     1,     1,     6,     6,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
		7,     7,     8,     8,     8,     9,     9,     10,    11,    11,    4,     4,     12,    12,    14,    14,    15,    15,    16,    17,
		17,    18,    18,    19,    19,    5,     5,     21,    21,    21,    21,    25,    25,    26,    26,    27,    27,    29,    29,    29,
		29,    30,    30,    30,    30,    31,    31,    31,    31,    32,    32,    28,    28,    34,    34,    35,    35,    36,    36,    37,
		37,    37,    37,    20,    38,    38,    39,    39,    3,     3,     40,    41,    41,    41,    41,    2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
		2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     47,    48,    42,    42,    45,    45,    49,    50,
		50,    51,    52,    52,    52,    52,    52,    52,    56,    33,    33,    57,    57,    57,    43,    43,    43,    54,    54,    60,
		60,    61,    62,    62,    24,    64,    64,    64,    64,    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
		44,    46,    46,    59,    59,    59,    59,    59,    67,    67,    67,    53,    53,    53,    53,    68,    68,    68,    68,    68,
		68,    68,    22,    22,    22,    22,    22,    69,    69,    72,    71,    58,    58,    58,    58,    58,    58,    58,    55,    55,
		55,    70,    70,    70,    23,    63,    73,    73,    74,    74,    74,    74,    13,    13,    13,    13,    13,    13,    13,    13,
		65,    65,    65,    65,    66,    76,    75,    75,    75,    75,    75,    75,    75,    75,    75,    77,    77,    77,    77,
	];

	/** Map of rules to the length of their right-hand side, which is the number of elements that have to
	 *  be popped from the stack(s) on reduction. */
	protected const RuleToLength = [
		1,     2,     2,     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
		1,     1,     1,     1,     1,     1,     1,     1,     0,     1,     2,     0,     1,     3,     0,     1,     0,     1,     7,     0,
		2,     1,     3,     3,     4,     1,     3,     1,     2,     1,     1,     2,     0,     1,     3,     4,     6,     1,     2,     1,
		1,     1,     1,     1,     1,     3,     3,     3,     3,     3,     3,     0,     1,     0,     2,     2,     4,     1,     3,     1,
		2,     2,     3,     2,     3,     1,     2,     2,     1,     2,     3,     0,     3,     3,     1,     1,     3,     3,     3,     4,
		1,     1,     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
		3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
		2,     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,     4,     3,     3,     4,
		4,     2,     2,     2,     2,     2,     2,     2,     1,     8,     12,    9,     3,     2,     1,     1,     0,     4,     2,     1,
		3,     2,     2,     4,     2,     4,     4,     6,     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,     1,     0,
		1,     1,     3,     5,     3,     4,     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
		3,     0,     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,     3,     1,     1,     1,     4,     1,     4,     6,
		4,     4,     1,     1,     3,     3,     3,     1,     4,     1,     3,     1,     4,     3,     3,     3,     3,     3,     1,     3,
		1,     1,     3,     1,     4,     1,     3,     1,     1,     1,     3,     0,     1,     2,     3,     4,     3,     4,     2,     2,
		2,     2,     1,     2,     1,     1,     1,     4,     3,     3,     3,     3,     3,     6,     3,     1,     1,     2,     1,
	];

	/** Map of symbols to their names */
	protected const SymbolToName = [
		'end',
		'error',
		"','",
		"'or'",
		"'xor'",
		"'and'",
		"'=>'",
		"'='",
		"'+='",
		"'-='",
		"'*='",
		"'/='",
		"'.='",
		"'%='",
		"'&='",
		"'|='",
		"'^='",
		"'<<='",
		"'>>='",
		"'**='",
		"'??='",
		"'?'",
		"':'",
		"'??'",
		"'||'",
		"'&&'",
		"'|'",
		"'|'",
		"'^'",
		"'&'",
		"'&'",
		"'=='",
		"'!='",
		"'==='",
		"'!=='",
		"'<=>'",
		"'<'",
		"'<='",
		"'>'",
		"'>='",
		"'.'",
		"'<<'",
		"'>>'",
		"'in'",
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'instanceof'",
		"'~'",
		"'++'",
		"'--'",
		"'(int)'",
		"'(float'",
		"'(string)'",
		"'(array)'",
		"'(object)'",
		"'(bool)'",
		"'@'",
		"'**'",
		"'['",
		"'new'",
		"'clone'",
		'integer',
		'floating-point number',
		'identifier',
		'variable name',
		'constant',
		'variable',
		'number',
		'string content',
		'quoted string',
		"'match'",
		"'default'",
		"'function'",
		"'fn'",
		"'return'",
		"'use'",
		"'isset'",
		"'empty'",
		"'->'",
		"'?->'",
		"'??->'",
		"'list'",
		"'array'",
		"'heredoc start'",
		"'heredoc end'",
		"'\${'",
		"'{\$'",
		"'::'",
		"'...'",
		"'(expand)'",
		'fully qualified name',
		'namespaced name',
		"'null'",
		"'true'",
		"'false'",
		"'e'",
		"'m'",
		"'a'",
		"'f'",
		"'('",
		"')'",
		"'{'",
		"'}'",
		"';'",
		"']'",
		"'\"'",
		"'$'",
		"'\\\\'",
		'whitespace',
		'comment',
	];

	/** Temporary value containing the result of last semantic action (reduction) */
	protected mixed $semValue = null;

	/** Semantic value stack (contains values of tokens and semantic action results) */
	protected array $semStack;

	/** @var Token[] Start attribute stack */
	protected array $startTokenStack;


	protected function reduce(int $rule, int $pos): void
	{
		(match ($rule) {
			0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 57, 72, 74, 94, 95, 100, 101, 168, 174, 175, 188, 190, 194, 195, 197, 198, 200, 211, 216, 217, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 237, 242, 243, 247, 251, 258, 260, 261, 263, 268, 286, 298 => fn() => $this->semValue = $this->semStack[$pos],
			2 => fn() => $this->semValue = new Node\ModifierNode($this->semStack[$pos], position: $this->startTokenStack[$pos]->position),
			3 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos], position: $this->startTokenStack[$pos]->position),
			22, 23, 24, 25, 26, 62, 63, 64 => fn() => $this->semValue = new Node\IdentifierNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			27 => fn() => $this->semValue = new Expression\VariableNode(substr($this->semStack[$pos], 1), $this->startTokenStack[$pos]->position),
			30, 40, 51, 83, 92, 93, 153, 154, 177, 178, 196, 224, 232, 259, 262, 294 => fn() => $this->semValue = $this->semStack[$pos - 1],
			31, 39, 52, 75, 91, 176, 199 => fn() => $this->semValue = [],
			32, 41, 53, 77, 85, 88, 179, 267, 282 => fn() => $this->semValue = [$this->semStack[$pos]],
			33, 42, 54, 66, 68, 70, 78, 84, 180, 266 => function () use ($pos) {
				$this->semStack[$pos - 2][] = $this->semStack[$pos];
				$this->semValue = $this->semStack[$pos - 2];
			},
			34, 36 => fn() => $this->semValue = false,
			35, 37 => fn() => $this->semValue = true,
			38 => fn() => $this->semValue = new Expression\MatchNode($this->semStack[$pos - 4], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 6]->position),
			43 => fn() => $this->semValue = new Node\MatchArmNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			44 => fn() => $this->semValue = new Node\MatchArmNode(null, $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			45 => fn() => $this->semValue = [null, ...$this->semStack[$pos]],
			46 => fn() => $this->semValue = [$this->semStack[$pos - 2], ...$this->semStack[$pos]],
			47, 49 => fn() => $this->semValue = [$this->semStack[$pos], false],
			48 => fn() => $this->semValue = [$this->semStack[$pos], true],
			50 => fn() => $this->semValue = [$this->convertArrayToList($this->semStack[$pos]), false],
			55 => fn() => $this->semValue = new Node\ParameterNode($this->semStack[$pos], null, $this->semStack[$pos - 3], $this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			56 => fn() => $this->semValue = new Node\ParameterNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->semStack[$pos - 5], $this->semStack[$pos - 4], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			58 => fn() => $this->semValue = new Node\NullableTypeNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			59 => fn() => $this->semValue = new Node\UnionTypeNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			60 => fn() => $this->semValue = new Node\IntersectionTypeNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			61 => fn() => $this->semValue = TagParser::handleBuiltinTypes($this->semStack[$pos]),
			65, 67, 69 => fn() => $this->semValue = [$this->semStack[$pos - 2], $this->semStack[$pos]],
			71, 73, 221 => fn() => $this->semValue = null,
			76 => fn() => $this->semValue = $this->semStack[$pos - 2],
			79 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, false, null, $this->startTokenStack[$pos]->position),
			80 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], true, false, null, $this->startTokenStack[$pos - 1]->position),
			81 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, true, null, $this->startTokenStack[$pos - 1]->position),
			82 => fn() => $this->semValue = new Node\ArgumentNode($this->semStack[$pos], false, false, $this->semStack[$pos - 2], $this->startTokenStack[$pos - 2]->position),
			86, 87 => fn() => $this->semValue = new Expression\FilterCallNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			89, 280, 281 => function () use ($pos) {
				$this->semStack[$pos - 1][] = $this->semStack[$pos];
				$this->semValue = $this->semStack[$pos - 1];
			},
			90 => fn() => $this->semValue = new Node\FilterNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			96, 98 => fn() => $this->semValue = new Expression\AssignNode($this->semStack[$pos - 2], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			97 => fn() => $this->semValue = new Expression\AssignNode($this->convertArrayToList($this->semStack[$pos - 2]), $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			99 => fn() => $this->semValue = new Expression\AssignNode($this->semStack[$pos - 3], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			102 => fn() => $this->semValue = new Expression\CloneNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			103 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '+', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			104 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '-', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			105 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '*', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			106 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '/', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			107 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '.', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			108 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '%', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			109 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			110 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '|', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			111 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '^', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			112 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '<<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			113 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '>>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			114 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '**', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			115 => fn() => $this->semValue = new Expression\AssignOpNode($this->semStack[$pos - 2], '??', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			116 => fn() => $this->semValue = new Expression\PostOpNode($this->semStack[$pos - 1], '++', $this->startTokenStack[$pos - 1]->position),
			117 => fn() => $this->semValue = new Expression\PreOpNode($this->semStack[$pos], '++', $this->startTokenStack[$pos - 1]->position),
			118 => fn() => $this->semValue = new Expression\PostOpNode($this->semStack[$pos - 1], '--', $this->startTokenStack[$pos - 1]->position),
			119 => fn() => $this->semValue = new Expression\PreOpNode($this->semStack[$pos], '--', $this->startTokenStack[$pos - 1]->position),
			120 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '||', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			121 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '&&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			122 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'or', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			123 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'and', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			124 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], 'xor', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			125 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '|', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			126, 127 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '&', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			128 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '^', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			129 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '.', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			130 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '+', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			131 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '-', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			132 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '*', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			133 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '/', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			134 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '%', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			135 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			136 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			137 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '**', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			138 => fn() => $this->semValue = new Expression\InNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			139 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '+', $this->startTokenStack[$pos - 1]->position),
			140 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '-', $this->startTokenStack[$pos - 1]->position),
			141 => fn() => $this->semValue = new Expression\NotNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			142 => fn() => $this->semValue = new Expression\UnaryOpNode($this->semStack[$pos], '~', $this->startTokenStack[$pos - 1]->position),
			143 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '===', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			144 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '!==', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			145 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '==', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			146 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '!=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			147 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<=>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			148 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			149 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '<=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			150 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			151 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '>=', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			152 => fn() => $this->semValue = new Expression\InstanceofNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			155 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 4], $this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 4]->position),
			156 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 3], null, $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			157 => fn() => $this->semValue = new Expression\TernaryNode($this->semStack[$pos - 2], $this->semStack[$pos], null, $this->startTokenStack[$pos - 2]->position),
			158 => fn() => $this->semValue = new Expression\BinaryOpNode($this->semStack[$pos - 2], '??', $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			159 => fn() => $this->semValue = new Expression\IssetNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			160 => fn() => $this->semValue = new Expression\EmptyNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			161 => fn() => $this->semValue = new Expression\CastNode('int', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			162 => fn() => $this->semValue = new Expression\CastNode('float', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			163 => fn() => $this->semValue = new Expression\CastNode('string', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			164 => fn() => $this->semValue = new Expression\CastNode('array', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			165 => fn() => $this->semValue = new Expression\CastNode('object', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			166 => fn() => $this->semValue = new Expression\CastNode('bool', $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			167 => fn() => $this->semValue = new Expression\ErrorSuppressNode($this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
			169 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 6], $this->semStack[$pos - 4], [], $this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 7]->position),
			170 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 10], $this->semStack[$pos - 8], $this->semStack[$pos - 6], $this->semStack[$pos - 5], $this->semStack[$pos - 2], $this->startTokenStack[$pos - 11]->position),
			171 => fn() => $this->semValue = new Expression\ClosureNode((bool) $this->semStack[$pos - 7], $this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->semStack[$pos - 2], null, $this->startTokenStack[$pos - 8]->position),
			172 => fn() => $this->semValue = new Expression\NewNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			173 => fn() => $this->semValue = new Expression\NewNode($this->semStack[$pos], [], $this->startTokenStack[$pos - 1]->position),
			181 => fn() => $this->semValue = new Node\ClosureUseNode($this->semStack[$pos], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 1]->position),
			182, 184 => fn() => $this->semValue = $this->checkFunctionName(new Expression\FunctionCallNode($this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position)),
			183, 185 => fn() => $this->semValue = $this->checkFunctionName(new Expression\FunctionCallableNode($this->semStack[$pos - 3], $this->startTokenStack[$pos - 3]->position)),
			186 => fn() => $this->semValue = new Expression\StaticMethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 3]->position),
			187 => fn() => $this->semValue = new Expression\StaticMethodCallableNode($this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			189, 191, 192 => fn() => $this->semValue = new Node\NameNode($this->semStack[$pos], Node\NameNode::KindNormal, $this->startTokenStack[$pos]->position),
			193 => fn() => $this->semValue = new Node\NameNode($this->semStack[$pos], Node\NameNode::KindFullyQualified, $this->startTokenStack[$pos]->position),
			201 => fn() => $this->semValue = new Expression\ConstantFetchNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			202 => fn() => $this->semValue = new Expression\ClassConstantFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			203 => fn() => $this->semValue = new Expression\ClassConstantFetchNode($this->semStack[$pos - 4], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 4]->position),
			204 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			205 => fn() => $this->semValue = new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			206 => function () use ($pos) {
				$this->semValue = $this->semStack[$pos];
				$this->shortArrays->attach($this->semValue);
			},
			207 => fn() => $this->semValue = Scalar\StringNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			208 => fn() => $this->semValue = Scalar\InterpolatedStringNode::parse($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			209 => fn() => $this->semValue = Scalar\IntegerNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			210 => fn() => $this->semValue = Scalar\FloatNode::parse($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			212, 295 => fn() => $this->semValue = new Scalar\StringNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			213 => fn() => $this->semValue = new Scalar\BooleanNode(true, $this->startTokenStack[$pos]->position),
			214 => fn() => $this->semValue = new Scalar\BooleanNode(false, $this->startTokenStack[$pos]->position),
			215 => fn() => $this->semValue = new Scalar\NullNode($this->startTokenStack[$pos]->position),
			218 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 2], [$this->semStack[$pos - 1]], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position, $this->startTokenStack[$pos]->position),
			219 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 1], [], $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position, $this->startTokenStack[$pos]->position),
			220 => fn() => $this->semValue = $this->parseDocString($this->semStack[$pos - 2], $this->semStack[$pos - 1], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position, $this->startTokenStack[$pos]->position),
			230 => fn() => $this->semValue = new Expression\ConstantFetchNode(new Node\NameNode($this->semStack[$pos], Node\NameNode::KindNormal, $this->startTokenStack[$pos]->position), $this->startTokenStack[$pos]->position),
			236, 252, 287 => fn() => $this->semValue = new Expression\ArrayAccessNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			238 => fn() => $this->semValue = new Expression\MethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], false, $this->startTokenStack[$pos - 3]->position),
			239 => fn() => $this->semValue = new Expression\MethodCallableNode($this->semStack[$pos - 5], $this->semStack[$pos - 3], $this->startTokenStack[$pos - 5]->position),
			240 => fn() => $this->semValue = new Expression\MethodCallNode($this->semStack[$pos - 3], $this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			241 => fn() => $this->semValue = new Expression\MethodCallNode(new Expression\BinaryOpNode($this->semStack[$pos - 3], '??', new Scalar\NullNode($this->startTokenStack[$pos - 3]->position), $this->startTokenStack[$pos - 3]->position), $this->semStack[$pos - 1], $this->semStack[$pos], true, $this->startTokenStack[$pos - 3]->position),
			244, 253, 288 => fn() => $this->semValue = new Expression\PropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], false, $this->startTokenStack[$pos - 2]->position),
			245, 254, 289 => fn() => $this->semValue = new Expression\PropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			246, 255, 290 => fn() => $this->semValue = new Expression\PropertyFetchNode(new Expression\BinaryOpNode($this->semStack[$pos - 2], '??', new Scalar\NullNode($this->startTokenStack[$pos - 2]->position), $this->startTokenStack[$pos - 2]->position), $this->semStack[$pos], true, $this->startTokenStack[$pos - 2]->position),
			248 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position),
			249 => function () use ($pos) {
				$var = $this->semStack[$pos]->name;
				$this->semValue = is_string($var)
					? new Node\VarLikeIdentifierNode($var, $this->startTokenStack[$pos]->position)
					: $var;
			},
			250, 256, 257 => fn() => $this->semValue = new Expression\StaticPropertyFetchNode($this->semStack[$pos - 2], $this->semStack[$pos], $this->startTokenStack[$pos - 2]->position),
			264 => fn() => $this->semValue = $this->convertArrayToList(new Expression\ArrayNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 3]->position)),
			265 => function () use ($pos) {
				$this->semValue = $this->semStack[$pos];
				$end = count($this->semValue) - 1;
				if (
					$this->semValue[$end]->value instanceof Expression\TemporaryNode
					&& !$this->semValue[$end]->value->value
				) {
					array_pop($this->semValue);
				}
			},
			269 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode($this->semStack[$pos], $this->startTokenStack[$pos]->position), null, false, false, $this->startTokenStack[$pos]->position),
			270 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode($this->semStack[$pos], $this->startTokenStack[$pos - 2]->position), $this->semStack[$pos - 2], false, false, $this->startTokenStack[$pos - 2]->position),
			271 => fn() => $this->semValue = new Node\ArrayItemNode(new Expression\TemporaryNode(null), null, false, false, $this->startTokenStack[$pos]->position),
			272 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, false, false, $this->startTokenStack[$pos]->position),
			273 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, true, false, $this->startTokenStack[$pos - 1]->position),
			274, 276 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], $this->semStack[$pos - 2], false, false, $this->startTokenStack[$pos - 2]->position),
			275, 277 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], $this->semStack[$pos - 3], true, false, $this->startTokenStack[$pos - 3]->position),
			278, 279 => fn() => $this->semValue = new Node\ArrayItemNode($this->semStack[$pos], null, false, true, $this->startTokenStack[$pos - 1]->position),
			283 => fn() => $this->semValue = [$this->semStack[$pos - 1], $this->semStack[$pos]],
			284 => fn() => $this->semValue = new Node\InterpolatedStringPartNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			285 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			291, 292 => fn() => $this->semValue = new Expression\VariableNode($this->semStack[$pos - 1], $this->startTokenStack[$pos - 2]->position),
			293 => fn() => $this->semValue = new Expression\ArrayAccessNode($this->semStack[$pos - 4], $this->semStack[$pos - 2], $this->startTokenStack[$pos - 5]->position),
			296 => fn() => $this->semValue = TagParser::parseOffset($this->semStack[$pos], $this->startTokenStack[$pos]->position),
			297 => fn() => $this->semValue = TagParser::parseOffset('-' . $this->semStack[$pos], $this->startTokenStack[$pos - 1]->position),
		})();
	}
}
